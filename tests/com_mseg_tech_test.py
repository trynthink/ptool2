#!/usr/bin/env python3

# Import code to be tested
import com_mseg_tech as cmt

# Import packages
import unittest
import numpy as np
import os
import csv
import itertools


# Skip this test if the EIA files are not expected, indicated by the
# EXPECT_EIA_FILES environment variable being set to the string 'true'
@unittest.skipUnless('EXPECT_EIA_FILES' in os.environ and
                     os.environ['EXPECT_EIA_FILES'] == 'true',
                     'EIA Data Files Not Available On This System')
# Skip this test if running on Travis-CI and print the given skip statement
@unittest.skipIf("TRAVIS" in os.environ and os.environ["TRAVIS"] == "true",
                 'External File Dependency Unavailable on Travis-CI')
class EIADataFileIntegrityTest(unittest.TestCase):
    """ Test for the presence of the anticipated column headings in
    the EIA commercial buildings technology characteristics data file
    and report when any required columns are missing. """

    @classmethod  # so that set up is run once for the entire class
    def setUpClass(self):
        # Instantiate objects from com_mseg_tech that contain useful variables
        self.usefulvars = cmt.UsefulVars()
        self.eiafiles = cmt.EIAData()

        # Open the EIA data file, extract the header row, and reformat
        # the text in each entry for easier handling, producing a list
        # of strings for the column titles
        with open(self.eiafiles.cpl_data, 'r') as tech:
            tech_fl = csv.reader(tech)

            # Skip content preceding header row, adjust skip
            # lines to stop at first of two header rows
            for i in range(0, self.usefulvars.cpl_data_skip_lines - 1):
                next(tech_fl)

            self.tech_head = [entry.strip() for entry in next(tech_fl)]

        # Open the time preference premium data file and extract the
        # first row of data for testing to determine whether the
        # correct number of lines were skipped and, as best as possible
        # considering no header row is provided, that the data are in
        # the expected order and format
        with open(self.eiafiles.tpp_data, 'r') as tpp:
            tpp_fl = csv.reader(tpp, delimiter='\t')

            # Skip content preceding header row
            for i in range(0, self.usefulvars.tpp_data_skip_lines):
                next(tpp_fl)

            # Store (expected) first line of data for later testing
            self.first_row = next(tpp_fl)

    # Check that the EIA ktek data includes the desired columns
    # to be imported for processing
    def test_integrity_of_commercial_technology_characteristics_data(self):

        # Check for the presence of each of the desired column headings
        for head in self.usefulvars.columns_to_keep:
            self.assertTrue(head in self.tech_head, msg='Column ' + head +
                            (' is missing from the technology data file.'))

    # Try to coerce a string to an int or float and update a boolean
    # depending on whether or not the attempt was successful
    def int_or_float(self, a_string):
        int_float = True
        try:
            float(a_string)
        except ValueError:
            try:
                int(a_string)
            except ValueError:
                int_float = False
        return int_float

    # Check that the first line is in the expected location and has
    # the expected number of entries
    def test_commercial_time_preference_premium_skip_row_number(self):
        # Test that the correct number of lines have been skipped
        # by confirming that the first row has four entries in it
        self.assertEqual(len(self.first_row), 4)

    # Test each entry in the first row of data to see if it has the
    # expected format (e.g., str, int, float), since there's no header
    # row against which the presence of expected columns can be checked
    def test_commercial_time_preference_premium_data_format(self):
        # Check if the first entry (fraction of the population in the
        # particular time preference group) is not an integer and is a float
        self.assertFalse(str.isdigit(self.first_row[0]))  # is not an integer
        try:  # is a float
            float(self.first_row[0])
        except ValueError:
            self.fail('Entry in first column cannot be coerced to a float.')

        # Check if the second entry (the time preference premium)
        # is an integer or a float
        self.assertTrue(self.int_or_float(self.first_row[1]))

        # Check if the third entry (the year) is an integer
        # (i.e., has only numerals in the string)
        self.assertTrue(str.isdigit(self.first_row[2]))

        # Check if the fourth entry is a string by trying to coerce it
        # to be an integer or float and catching the expected exception
        self.assertTrue(isinstance(self.first_row[3], str))
        with self.assertRaises(ValueError):
            int(self.first_row[3])
            float(self.first_row[3])


class CommonUnitTest(unittest.TestCase):
    """ Top level test class that contains common variables with data so
    that all tests are easily set up to use a consistent body of data.
    This class also includes custom testing functions used in multiple
    child test classes. """

    # Define an array taking the form of the EIA cost, performance, and
    # lifetime data, but with a reduced set of columns incorporating
    # only the data required as final outputs and with rows modified to
    # represent the full range of data in the EIA data without having
    # an excessive number of rows
    tech_data = np.array([
        (1, 1, 4, 1, 1, 0.0150, 3.10, 67.78, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2003 installed base'),
        (1, 1, 5, 1, 1, 0.1578, 3.10, 67.78, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2003 installed base'),
        (1, 1, 6, 1, 1, 0.1002, 3.10, 67.78, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2003 installed base'),
        (1, 2, 4, 1, 1, 0, 3.25, 81.39, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2012 installed base'),
        (1, 2, 5, 1, 1, 0, 3.25, 81.39, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2012 installed base'),
        (1, 2, 6, 1, 1, 0, 3.25, 81.39, 1.47, 15, 2003, 2009,
         'rooftop_ASHP-heat 2012 installed base'),
        (1, 3, 4, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 current standard/ typical'),
        (1, 3, 5, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 current standard/ typical'),
        (1, 3, 6, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 current standard/ typical'),
        (1, 4, 4, 1, 1, 0, 3.35, 83.61, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 ENERGY STAR'),
        (1, 4, 5, 1, 1, 0, 3.35, 83.61, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 ENERGY STAR'),
        (1, 4, 6, 1, 1, 0, 3.35, 83.61, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 ENERGY STAR'),
        (1, 5, 4, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 high'),
        (1, 5, 5, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 high'),
        (1, 5, 6, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2003, 2052,
         'rooftop_ASHP-heat 2013 high'),
        (1, 6, 4, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 typical'),
        (1, 6, 5, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 typical'),
        (1, 6, 6, 1, 1, 0, 3.30, 81.39, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 typical'),
        (1, 7, 4, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 high'),
        (1, 7, 5, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 high'),
        (1, 7, 6, 1, 1, 0, 3.40, 102.78, 1.47, 15, 2020, 2052,
         'rooftop_ASHP-heat 2020 high'),
        (2, 1, 4, 1, 1, 0.0173, 3.40, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2003 installed base'),
        (2, 1, 5, 1, 1, 0.0262, 3.40, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2003 installed base'),
        (2, 1, 6, 1, 1, 0.0086, 3.40, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2003 installed base'),
        (2, 2, 4, 1, 1, 0, 3.50, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2012 installed base'),
        (2, 2, 5, 1, 1, 0, 3.50, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2012 installed base'),
        (2, 2, 6, 1, 1, 0, 3.50, 545.83, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2012 installed base'),
        (2, 3, 4, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 typical'),
        (2, 3, 5, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 typical'),
        (2, 3, 6, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 typical'),
        (2, 4, 4, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 mid'),
        (2, 4, 5, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 mid'),
        (2, 4, 6, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 mid'),
        (2, 5, 4, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 high'),
        (2, 5, 5, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 high'),
        (2, 5, 6, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2003, 2052,
         'comm_GSHP-heat 2013 high'),
        (2, 6, 4, 1, 1, 0, 3.80, 514.58, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 typical'),
        (2, 6, 5, 1, 1, 0, 3.80, 514.58, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 typical'),
        (2, 6, 6, 1, 1, 0, 3.80, 514.58, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 typical'),
        (2, 7, 4, 1, 1, 0, 4.20, 571.88, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 high'),
        (2, 7, 5, 1, 1, 0, 4.20, 571.88, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 high'),
        (2, 7, 6, 1, 1, 0, 4.20, 571.88, 3.13, 25, 2020, 2052,
         'comm_GSHP-heat 2020 high'),
        (2, 10, 4, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
        (2, 10, 5, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
        (2, 10, 6, 1, 1, 0, 3.60, 514.58, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
        (2, 11, 4, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
        (2, 11, 5, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
        (2, 11, 6, 1, 1, 0, 3.70, 530.21, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
        (2, 12, 4, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
        (2, 12, 5, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
        (2, 12, 6, 1, 1, 0, 4.00, 571.88, 3.13, 25, 2008, 2016,
         'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
        (46, 1, 4, 1, 1, 0.0809, 0.94, 16.68, 0.26, 15, 2003, 2052,
         'elec_boiler 2003 installed base'),
        (46, 1, 5, 1, 1, 0.0903, 0.94, 16.68, 0.26, 15, 2003, 2052,
         'elec_boiler 2003 installed base'),
        (46, 1, 6, 1, 1, 0.0356, 0.94, 16.68, 0.26, 15, 2003, 2052,
         'elec_boiler 2003 installed base'),
        (46, 2, 4, 1, 1, 0, 0.94, 21.13, 0.26, 15, 2012, 2052,
         'elec_boiler 2012 installed base'),
        (46, 2, 5, 1, 1, 0, 0.94, 21.13, 0.26, 15, 2012, 2052,
         'elec_boiler 2012 installed base'),
        (46, 2, 6, 1, 1, 0, 0.94, 21.13, 0.26, 15, 2012, 2052,
         'elec_boiler 2012 installed base'),
        (31, 1, 8, 4, 1, 0.7990, 0.37, 4798.93, 32.65, 20, 2003, 2003,
         'CAV_Vent 2003 installed base'),
        (31, 1, 9, 4, 1, 0.8629, 0.37, 4798.93, 32.65, 20, 2003, 2003,
         'CAV_Vent 2003 installed base'),
        (31, 1, 10, 4, 1, 0.8617, 0.37, 4798.93, 32.65, 20, 2003, 2003,
         'CAV_Vent 2003 installed base'),
        (31, 2, 8, 4, 1, 0.0000, 0.38, 5061.56, 34.43, 20, 2004, 2052,
         'CAV_Vent 2007 installed base'),
        (31, 2, 9, 4, 1, 0.0000, 0.38, 5061.56, 34.43, 20, 2004, 2052,
         'CAV_Vent 2007 installed base'),
        (31, 2, 10, 4, 1, 0.0000, 0.38, 5061.56, 34.43, 20, 2004, 2052,
         'CAV_Vent 2007 installed base'),
        (31, 3, 8, 4, 1, 0.0000, 0.41, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 minimum'),
        (31, 3, 9, 4, 1, 0.0000, 0.41, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 minimum'),
        (31, 3, 10, 4, 1, 0.0000, 0.41, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 minimum'),
        (31, 4, 8, 4, 1, 0.0000, 0.43, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 typical'),
        (31, 4, 9, 4, 1, 0.0000, 0.43, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 typical'),
        (31, 4, 10, 4, 1, 0.0000, 0.43, 5061.56, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 typical'),
        (31, 5, 8, 4, 1, 0.0000, 0.48, 5509.18, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 high'),
        (31, 5, 9, 4, 1, 0.0000, 0.48, 5509.18, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 high'),
        (31, 5, 10, 4, 1, 0.0000, 0.48, 5509.18, 34.43, 20, 2011, 2052,
         'CAV_Vent 2011 high'),
        (31, 10, 8, 4, 1, 0.0000, 0.51, 5061.56, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 typical'),
        (31, 10, 9, 4, 1, 0.0000, 0.51, 5061.56, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 typical'),
        (31, 10, 10, 4, 1, 0.0000, 0.51, 5061.56, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 typical'),
        (31, 11, 8, 4, 1, 0.0000, 0.58, 5509.18, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 high'),
        (31, 11, 9, 4, 1, 0.0000, 0.58, 5509.18, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 high'),
        (31, 11, 10, 4, 1, 0.0000, 0.58, 5509.18, 34.43, 20, 2020, 2052,
         'CAV_Vent 2020 high'),
        (32, 1, 8, 4, 1, 0.2010, 1.15, 6266.69, 18.94, 20, 2003, 2003,
         'VAV_Vent 20003 installed base'),
        (32, 1, 9, 4, 1, 0.1371, 1.15, 6266.69, 18.94, 20, 2003, 2003,
         'VAV_Vent 20003 installed base'),
        (32, 1, 10, 4, 1, 0.1383, 1.15, 6266.69, 18.94, 20, 2003, 2003,
         'VAV_Vent 20003 installed base'),
        (32, 2, 8, 4, 1, 0.0000, 1.26, 6266.69, 18.94, 20, 2004, 2052,
         'VAV_Vent 2007 installed base'),
        (32, 2, 9, 4, 1, 0.0000, 1.26, 6266.69, 18.94, 20, 2004, 2052,
         'VAV_Vent 2007 installed base'),
        (32, 2, 10, 4, 1, 0.0000, 1.26, 6266.69, 18.94, 20, 2004, 2052,
         'VAV_Vent 2007 installed base'),
        (32, 3, 8, 4, 1, 0.0000, 1.28, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 minimum'),
        (32, 3, 9, 4, 1, 0.0000, 1.28, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 minimum'),
        (32, 3, 10, 4, 1, 0.0000, 1.28, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 minimum'),
        (32, 4, 8, 4, 1, 0.0000, 1.34, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 typical'),
        (32, 4, 9, 4, 1, 0.0000, 1.34, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 typical'),
        (32, 4, 10, 4, 1, 0.0000, 1.34, 6266.69, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 typical'),
        (32, 5, 8, 4, 1, 0.0000, 1.50, 6886.47, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 high'),
        (32, 5, 9, 4, 1, 0.0000, 1.50, 6886.47, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 high'),
        (32, 5, 10, 4, 1, 0.0000, 1.50, 6886.47, 18.94, 20, 2011, 2052,
         'VAV_Vent 2011 high'),
        (32, 10, 8, 4, 1, 0.0000, 1.59, 6266.69, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 typical'),
        (32, 10, 9, 4, 1, 0.0000, 1.59, 6266.69, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 typical'),
        (32, 10, 10, 4, 1, 0.0000, 1.59, 6266.69, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 typical'),
        (32, 11, 8, 4, 1, 0.0000, 1.82, 6886.47, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 high'),
        (32, 11, 9, 4, 1, 0.0000, 1.82, 6886.47, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 high'),
        (32, 11, 10, 4, 1, 0.0000, 1.82, 6886.47, 18.94, 20, 2020, 2052,
         'VAV_Vent 2020 high'),
        (24, 7, 9, 6, 1, 0.0000, 42.4, 84.67, 0.90, 15, 2011, 2052,
         '23W CFL 2011 typical'),
        (24, 7, 10, 6, 1, 0.0000, 42.4, 84.67, 0.90, 15, 2011, 2052,
         '23W CFL 2011 typical'),
        (24, 7, 11, 6, 1, 0.0000, 42.4, 84.67, 0.90, 15, 2011, 2052,
         '23W CFL 2011 typical'),
        (24, 8, 9, 6, 1, 0.0000, 44.6, 78.62, 0.86, 15, 2020, 2052,
         '23W CFL 2020 typical'),
        (24, 8, 10, 6, 1, 0.0000, 44.6, 78.62, 0.86, 15, 2020, 2052,
         '23W CFL 2020 typical'),
        (24, 8, 11, 6, 1, 0.0000, 44.6, 78.62, 0.86, 15, 2020, 2052,
         '23W CFL 2020 typical'),
        (24, 9, 9, 6, 1, 0.0000, 46.8, 73.01, 0.81, 15, 2030, 2052,
         '23W CFL 2030 typical'),
        (24, 9, 10, 6, 1, 0.0000, 46.8, 73.01, 0.81, 15, 2030, 2052,
         '23W CFL 2030 typical'),
        (24, 9, 11, 6, 1, 0.0000, 46.8, 73.01, 0.81, 15, 2030, 2052,
         '23W CFL 2030 typical'),
        (24, 15, 9, 6, 1, 0.0383, 13.5, 81.89, 8.34, 15, 2003, 2012,
         '90W Halogen PAR-38 2003 installed base'),
        (24, 15, 10, 6, 1, 0.1290, 13.5, 81.89, 8.34, 15, 2003, 2012,
         '90W Halogen PAR-38 2003 installed base'),
        (24, 15, 11, 6, 1, 0.0273, 13.5, 81.89, 8.34, 15, 2003, 2012,
         '90W Halogen PAR-38 2003 installed base'),
        (24, 16, 9, 6, 1, 0.0000, 13.5, 67.01, 7.05, 15, 2007, 2012,
         '90W Halogen PAR-38 2007 installed base'),
        (24, 16, 10, 6, 1, 0.0000, 13.5, 67.01, 7.05, 15, 2007, 2012,
         '90W Halogen PAR-38 2007 installed base'),
        (24, 16, 11, 6, 1, 0.0000, 13.5, 67.01, 7.05, 15, 2007, 2012,
         '90W Halogen PAR-38 2007 installed base'),
        (24, 17, 9, 6, 1, 0.0000, 13.7, 68.02, 5.49, 15, 2011, 2052,
         '90W Halogen PAR-38 2011 typical'),
        (24, 17, 10, 6, 1, 0.0000, 13.7, 68.02, 5.49, 15, 2011, 2052,
         '90W Halogen PAR-38 2011 typical'),
        (24, 17, 11, 6, 1, 0.0000, 13.7, 68.02, 5.49, 15, 2011, 2052,
         '90W Halogen PAR-38 2011 typical'),
        (24, 18, 9, 6, 1, 0.0000, 14.3, 64.17, 5.21, 15, 2020, 2052,
         '90W Halogen PAR-38 2020 typical'),
        (24, 18, 10, 6, 1, 0.0000, 14.3, 64.17, 5.21, 15, 2020, 2052,
         '90W Halogen PAR-38 2020 typical'),
        (24, 18, 11, 6, 1, 0.0000, 14.3, 64.17, 5.21, 15, 2020, 2052,
         '90W Halogen PAR-38 2020 typical'),
        (24, 20, 9, 6, 1, 0.0000, 16.7, 86.30, 9.10, 15, 2003, 2012,
         '70W HIR PAR-38 2003 installed base'),
        (24, 20, 10, 6, 1, 0.0000, 16.7, 86.30, 9.10, 15, 2003, 2012,
         '70W HIR PAR-38 2003 installed base'),
        (24, 20, 11, 6, 1, 0.0000, 16.7, 86.30, 9.10, 15, 2003, 2012,
         '70W HIR PAR-38 2003 installed base'),
        (24, 21, 9, 6, 1, 0.0000, 16.7, 70.63, 7.64, 15, 2007, 2012,
         '70W HIR PAR-38 2007 installed base'),
        (24, 21, 10, 6, 1, 0.0000, 16.7, 70.63, 7.64, 15, 2007, 2012,
         '70W HIR PAR-38 2007 installed base'),
        (24, 21, 11, 6, 1, 0.0000, 16.7, 70.63, 7.64, 15, 2007, 2012,
         '70W HIR PAR-38 2007 installed base'),
        (24, 22, 9, 6, 1, 0.0000, 18.7, 73.56, 12.04, 15, 2011, 2052,
         '70W HIR PAR-38 2011 typical'),
        (24, 22, 10, 6, 1, 0.0000, 18.7, 73.56, 12.04, 15, 2011, 2052,
         '70W HIR PAR-38 2011 typical'),
        (24, 22, 11, 6, 1, 0.0000, 18.7, 73.56, 12.04, 15, 2011, 2052,
         '70W HIR PAR-38 2011 typical'),
        (24, 23, 9, 6, 1, 0.0000, 19.6, 69.32, 11.40, 15, 2020, 2052,
         '70W HIR PAR-38 2020 typical'),
        (24, 23, 10, 6, 1, 0.0000, 19.6, 69.32, 11.40, 15, 2020, 2052,
         '70W HIR PAR-38 2020 typical'),
        (24, 23, 11, 6, 1, 0.0000, 19.6, 69.32, 11.40, 15, 2020, 2052,
         '70W HIR PAR-38 2020 typical'),
        (24, 25, 9, 6, 1, 0.0000, 15.1, 509.77, 27.52, 15, 2003, 2019,
         'LED Edison 2003 installed base'),
        (24, 25, 10, 6, 1, 0.0000, 15.1, 509.77, 27.52, 15, 2003, 2019,
         'LED Edison 2003 installed base'),
        (24, 25, 11, 6, 1, 0.0000, 15.1, 509.77, 27.52, 15, 2003, 2019,
         'LED Edison 2003 installed base'),
        (24, 26, 9, 6, 1, 0.0000, 51.0, 296.81, 28.71, 15, 2007, 2052,
         'LED Edison 2007 installed base'),
        (24, 26, 10, 6, 1, 0.0000, 51.0, 296.81, 28.71, 15, 2007, 2052,
         'LED Edison 2007 installed base'),
        (24, 26, 11, 6, 1, 0.0000, 51.0, 296.81, 28.71, 15, 2007, 2052,
         'LED Edison 2007 installed base'),
        (24, 27, 9, 6, 1, 0.0000, 60.0, 167.69, 5.69, 15, 2011, 2052,
         'LED Edison 2011 typical'),
        (24, 27, 10, 6, 1, 0.0000, 60.0, 167.69, 5.69, 15, 2011, 2052,
         'LED Edison 2011 typical'),
        (24, 27, 11, 6, 1, 0.0000, 60.0, 167.69, 5.69, 15, 2011, 2052,
         'LED Edison 2011 typical'),
        (24, 28, 9, 6, 1, 0.0000, 170.0, 105.71, 1.04, 15, 2020, 2052,
         'LED Edison 2020 typical'),
        (24, 28, 10, 6, 1, 0.0000, 170.0, 105.71, 1.04, 15, 2020, 2052,
         'LED Edison 2020 typical'),
        (24, 28, 11, 6, 1, 0.0000, 170.0, 105.71, 1.04, 15, 2020, 2052,
         'LED Edison 2020 typical'),
        (24, 29, 9, 6, 1, 0.0000, 202.0, 98.48, 0.72, 15, 2030, 2052,
         'LED Edison 2030 typical'),
        (24, 29, 10, 6, 1, 0.0000, 202.0, 98.48, 0.72, 15, 2030, 2052,
         'LED Edison 2030 typical'),
        (24, 29, 11, 6, 1, 0.0000, 202.0, 98.48, 0.72, 15, 2030, 2052,
         'LED Edison 2030 typical'),
        (25, 1, 9, 6, 1, 0.0364, 41.6, 19.77, 1.45, 15, 2003, 2005,
         'F34T12'),
        (25, 1, 10, 6, 1, 0.0288, 41.6, 19.77, 1.45, 15, 2003, 2005,
         'F34T12'),
        (25, 1, 11, 6, 1, 0.0286, 41.6, 19.77, 1.45, 15, 2003, 2005,
         'F34T12'),
        (25, 2, 9, 6, 1, 0.1090, 59.0, 31.11, 0.84, 15, 2003, 2052,
         'T8 F32 EEMag (e)'),
        (25, 2, 10, 6, 1, 0.0864, 59.0, 31.11, 0.84, 15, 2003, 2052,
         'T8 F32 EEMag (e)'),
        (25, 2, 11, 6, 1, 0.0856, 59.0, 31.11, 0.84, 15, 2003, 2052,
         'T8 F32 EEMag (e)'),
        (25, 9, 9, 6, 1, 0.0074, 151.1, 24.68, 1.61, 15, 2003, 2012,
         'F28T8 HE w/ OS 2011 typical'),
        (25, 9, 10, 6, 1, 0.0007, 151.1, 24.68, 1.61, 15, 2003, 2012,
         'F28T8 HE w/ OS 2011 typical'),
        (25, 9, 11, 6, 1, 0.0238, 151.1, 24.68, 1.61, 15, 2003, 2012,
         'F28T8 HE w/ OS 2011 typical'),
        (25, 10, 9, 6, 1, 0.0000, 162.5, 24.08, 1.58, 15, 2020, 2029,
         'F28T8 HE w/ OS 2020 typical'),
        (25, 10, 10, 6, 1, 0.0000, 162.5, 24.08, 1.58, 15, 2020, 2029,
         'F28T8 HE w/ OS 2020 typical'),
        (25, 10, 11, 6, 1, 0.0000, 162.5, 24.08, 1.58, 15, 2020, 2029,
         'F28T8 HE w/ OS 2020 typical'),
        (25, 11, 9, 6, 1, 0.0000, 165.2, 23.43, 1.54, 15, 2030, 2052,
         'F28T8 HE w/ OS 2030 typical'),
        (25, 11, 10, 6, 1, 0.0000, 165.2, 23.43, 1.54, 15, 2030, 2052,
         'F28T8 HE w/ OS 2030 typical'),
        (25, 11, 11, 6, 1, 0.0000, 165.2, 23.43, 1.54, 15, 2030, 2052,
         'F28T8 HE w/ OS 2030 typical'),
        (25, 15, 9, 6, 1, 0.0000, 178.7, 26.52, 1.40, 15, 2003, 2019,
         'F28T8 HE w/ OS & SR 2011 typical'),
        (25, 15, 10, 6, 1, 0.0000, 178.7, 26.52, 1.40, 15, 2003, 2019,
         'F28T8 HE w/ OS & SR 2011 typical'),
        (25, 15, 11, 6, 1, 0.0000, 178.7, 26.52, 1.40, 15, 2003, 2019,
         'F28T8 HE w/ OS & SR 2011 typical'),
        (25, 16, 9, 6, 1, 0.0000, 192.1, 25.85, 1.37, 15, 2020, 2029,
         'F28T8 HE w/ OS & SR 2020 typical'),
        (25, 16, 10, 6, 1, 0.0000, 192.1, 25.85, 1.37, 15, 2020, 2029,
         'F28T8 HE w/ OS & SR 2020 typical'),
        (25, 16, 11, 6, 1, 0.0000, 192.1, 25.85, 1.37, 15, 2020, 2029,
         'F28T8 HE w/ OS & SR 2020 typical'),
        (25, 17, 9, 6, 1, 0.0000, 195.3, 25.12, 1.34, 15, 2030, 2052,
         'F28T8 HE w/ OS & SR 2030 typical'),
        (25, 17, 10, 6, 1, 0.0000, 195.3, 25.12, 1.34, 15, 2030, 2052,
         'F28T8 HE w/ OS & SR 2030 typical'),
        (25, 17, 11, 6, 1, 0.0000, 195.3, 25.12, 1.34, 15, 2030, 2052,
         'F28T8 HE w/ OS & SR 2030 typical'),
        (34, 1, 1, 5, 1, 0.5310, 0.70, 52.56, 0.43, 10, 1995, 2052,
         'Range, Electric, 4 burner, oven, 11-inch griddle'),
        (34, 1, 2, 5, 1, 0.3867, 0.70, 52.56, 0.43, 10, 1995, 2052,
         'Range, Electric, 4 burner, oven, 11-inch griddle'),
        (34, 1, 3, 5, 1, 0.4901, 0.70, 52.56, 0.43, 10, 1995, 2052,
         'Range, Electric, 4 burner, oven, 11-inch griddle'),
        (34, 1, 4, 5, 1, 0.4820, 0.70, 52.56, 0.43, 10, 1995, 2052,
         'Range, Electric, 4 burner, oven, 11-inch griddle'),
        (34, 1, 5, 5, 1, 0.4878, 0.70, 52.56, 0.43, 10, 1995, 2052,
         'Range, Electric, 4 burner, oven, 11-inch griddle'),
        (34, 1, 6, 5, 1, 0.4585, 0.70, 52.56, 0.43, 10, 1995, 2052,
         'Range, Electric, 4 burner, oven, 11-inch griddle'),
        (34, 1, 7, 5, 1, 0.4539, 0.70, 52.56, 0.43, 10, 1995, 2052,
         'Range, Electric, 4 burner, oven, 11-inch griddle'),
        (34, 1, 8, 5, 1, 0.4984, 0.70, 52.56, 0.43, 10, 1995, 2052,
         'Range, Electric, 4 burner, oven, 11-inch griddle'),
        (34, 1, 9, 5, 1, 0.6556, 0.70, 52.56, 0.43, 10, 1995, 2052,
         'Range, Electric, 4 burner, oven, 11-inch griddle'),
        (34, 2, 1, 5, 1, 0.0000, 0.80, 61.46, 0.43, 10, 2000, 2052,
         'Range, Electric-induction, 4 burner, oven, 11-inch griddle'),
        (34, 2, 2, 5, 1, 0.0000, 0.80, 61.46, 0.43, 10, 2000, 2052,
         'Range, Electric-induction, 4 burner, oven, 11-inch griddle'),
        (34, 2, 3, 5, 1, 0.0000, 0.80, 61.46, 0.43, 10, 2000, 2052,
         'Range, Electric-induction, 4 burner, oven, 11-inch griddle'),
        (34, 2, 4, 5, 1, 0.0000, 0.80, 61.46, 0.43, 10, 2000, 2052,
         'Range, Electric-induction, 4 burner, oven, 11-inch griddle'),
        (34, 2, 5, 5, 1, 0.0000, 0.80, 61.46, 0.43, 10, 2000, 2052,
         'Range, Electric-induction, 4 burner, oven, 11-inch griddle'),
        (34, 2, 6, 5, 1, 0.0000, 0.80, 61.46, 0.43, 10, 2000, 2052,
         'Range, Electric-induction, 4 burner, oven, 11-inch griddle'),
        (34, 2, 7, 5, 1, 0.0000, 0.80, 61.46, 0.43, 10, 2000, 2052,
         'Range, Electric-induction, 4 burner, oven, 11-inch griddle'),
        (34, 2, 8, 5, 1, 0.0000, 0.80, 61.46, 0.43, 10, 2000, 2052,
         'Range, Electric-induction, 4 burner, oven, 11-inch griddle'),
        (34, 2, 9, 5, 1, 0.0000, 0.80, 61.46, 0.43, 10, 2000, 2052,
         'Range, Electric-induction, 4 burner, oven, 11-inch griddle'),
        (35, 1, 1, 5, 2, 0.2814, 0.45, 37.70, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 burner, oven, 11-inch griddle'),
        (35, 1, 2, 5, 2, 0.3680, 0.45, 37.70, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 burner, oven, 11-inch griddle'),
        (35, 1, 3, 5, 2, 0.3059, 0.45, 37.70, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 burner, oven, 11-inch griddle'),
        (35, 1, 4, 5, 2, 0.3108, 0.45, 37.70, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 burner, oven, 11-inch griddle'),
        (35, 1, 5, 5, 2, 0.3073, 0.45, 37.70, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 burner, oven, 11-inch griddle'),
        (35, 1, 6, 5, 2, 0.3249, 0.45, 37.70, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 burner, oven, 11-inch griddle'),
        (35, 1, 7, 5, 2, 0.3277, 0.45, 37.70, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 burner, oven, 11-inch griddle'),
        (35, 1, 8, 5, 2, 0.3010, 0.45, 37.70, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 burner, oven, 11-inch griddle'),
        (35, 1, 9, 5, 2, 0.2066, 0.45, 37.70, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 burner, oven, 11-inch griddle'),
        (35, 2, 1, 5, 2, 0.1876, 0.60, 51.37, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 powered burners, convect. oven, 11-inch griddle'),
        (35, 2, 2, 5, 2, 0.2453, 0.60, 51.37, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 powered burners, convect. oven, 11-inch griddle'),
        (35, 2, 3, 5, 2, 0.2039, 0.60, 51.37, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 powered burners, convect. oven, 11-inch griddle'),
        (35, 2, 4, 5, 2, 0.2072, 0.60, 51.37, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 powered burners, convect. oven, 11-inch griddle'),
        (35, 2, 5, 5, 2, 0.2049, 0.60, 51.37, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 powered burners, convect. oven, 11-inch griddle'),
        (35, 2, 6, 5, 2, 0.2166, 0.60, 51.37, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 powered burners, convect. oven, 11-inch griddle'),
        (35, 2, 7, 5, 2, 0.2184, 0.60, 51.37, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 powered burners, convect. oven, 11-inch griddle'),
        (35, 2, 8, 5, 2, 0.2007, 0.60, 51.37, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 powered burners, convect. oven, 11-inch griddle'),
        (35, 2, 9, 5, 2, 0.1378, 0.60, 51.37, 0.43, 10, 1995, 2052,
         'Range, Gas, 4 powered burners, convect. oven, 11-inch griddle')],
        dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'), ('f', 'i4'),
               ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'), ('c2', 'f8'),
               ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
               ('technology name', '<U50')])

    # Define an array of service demand data that are needed to
    # process the technology cost, performance, and lifetime data
    # (note that the year data beyond 2020 were removed and some of
    # the technology performance levels that appear here do not have
    # corresponding cost/performance/lifetime data)
    sd_data = np.array([
        (4, 6, 1, 1, 1, 1,  1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2003 installed base", 3.10),
        (4, 6, 1, 1, 2, 1,  1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2003 installed base", 3.10),
        (4, 6, 1, 1, 3, 1,  1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2003 installed base", 3.10),
        (4, 6, 1, 1, 1, 1,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2012 installed base", 3.25),
        (4, 6, 1, 1, 2, 1,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2012 installed base", 3.25),
        (4, 6, 1, 1, 3, 1,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2012 installed base", 3.25),
        (4, 6, 1, 1, 1, 1,  3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 current standard/ typ", 3.30),
        (4, 6, 1, 1, 2, 1,  3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 current standard/ typ", 3.30),
        (4, 6, 1, 1, 3, 1,  3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 current standard/ typ", 3.30),
        (4, 6, 1, 1, 1, 1,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 ENERGY STAR", 3.35),
        (4, 6, 1, 1, 2, 1,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 ENERGY STAR", 3.35),
        (4, 6, 1, 1, 3, 1,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 ENERGY STAR", 3.35),
        (4, 6, 1, 1, 1, 1,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 high", 3.40),
        (4, 6, 1, 1, 2, 1,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 high", 3.40),
        (4, 6, 1, 1, 3, 1,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2013 high", 3.40),
        (4, 6, 1, 1, 1, 1,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 typical", 3.30),
        (4, 6, 1, 1, 2, 1,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 typical", 3.30),
        (4, 6, 1, 1, 3, 1,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 typical", 3.30),
        (4, 6, 1, 1, 1, 1,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 high", 3.40),
        (4, 6, 1, 1, 2, 1,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 high", 3.40),
        (4, 6, 1, 1, 3, 1,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "rooftop_ASHP-heat 2020 high", 3.40),
        (4, 6, 1, 1, 1, 2,  1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2003 installed base", 3.40),
        (4, 6, 1, 1, 2, 2,  1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2003 installed base", 3.40),
        (4, 6, 1, 1, 3, 2,  1, 0.317, 0.299, 0.283, 0.268, 0.253, 0.239, 0.226,
         0.214, 0.202, 0.190, 0.180, 0.169, 0.160, 0.151, 0.142, 0.134, 0.127,
         "comm_GSHP-heat 2003 installed base", 3.40),
        (4, 6, 1, 1, 1, 2,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2012 installed base", 3.50),
        (4, 6, 1, 1, 2, 2,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2012 installed base", 3.50),
        (4, 6, 1, 1, 3, 2,  2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2012 installed base", 3.50),
        (4, 6, 1, 1, 1, 2,  3, 0.003, 0.003, 0.003, 0.003, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001, 0.001, 0.001, 0.000,
         "comm_GSHP-heat 2013 typical", 3.60),
        (4, 6, 1, 1, 2, 2,  3, 0.009, 0.009, 0.009, 0.009, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.007, 0.007, 0.007, 0.000,
         "comm_GSHP-heat 2013 typical", 3.60),
        (4, 6, 1, 1, 3, 2,  3, 0.000, 0.011, 0.022, 0.032, 0.041, 0.039, 0.037,
         0.035, 0.033, 0.031, 0.029, 0.028, 0.026, 0.025, 0.031, 0.037, 0.043,
         "comm_GSHP-heat 2013 typical", 3.60),
        (4, 6, 1, 1, 1, 2,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid", 3.70),
        (4, 6, 1, 1, 2, 2,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid", 3.70),
        (4, 6, 1, 1, 3, 2,  4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid", 3.70),
        (4, 6, 1, 1, 1, 2,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high", 4.00),
        (4, 6, 1, 1, 2, 2,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high", 4.00),
        (4, 6, 1, 1, 3, 2,  5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high", 4.00),
        (4, 6, 1, 1, 1, 2,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001,
         "comm_GSHP-heat 2020 typical", 3.80),
        (4, 6, 1, 1, 2, 2,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.007,
         "comm_GSHP-heat 2020 typical", 3.80),
        (4, 6, 1, 1, 3, 2,  6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2020 typical", 3.80),
        (4, 6, 1, 1, 1, 2,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2020 high", 4.20),
        (4, 6, 1, 1, 2, 2,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2020 high", 4.20),
        (4, 6, 1, 1, 3, 2,  7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2020 high", 4.20),
        (4, 6, 1, 1, 1, 2, 10, 0.000, 0.000, 0.000, 0.000, 0.003, 0.003, 0.002,
         0.002, 0.001, 0.002, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 typ 10% ITC w MACRS", 3.60),
        (4, 6, 1, 1, 2, 2, 10, 0.000, 0.000, 0.000, 0.000, 0.009, 0.009, 0.008,
         0.008, 0.008, 0.008, 0.008, 0.007, 0.007, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 typ 10% ITC w MACRS", 3.60),
        (4, 6, 1, 1, 3, 2, 10, 0.000, 0.000, 0.000, 0.000, 0.000, 0.011, 0.021,
         0.030, 0.037, 0.044, 0.050, 0.056, 0.061, 0.066, 0.062, 0.059, 0.055,
         "comm_GSHP-heat 2013 typ 10% ITC w MACRS", 3.60),
        (4, 6, 1, 1, 1, 2, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid 10% ITC w MACRS", 3.70),
        (4, 6, 1, 1, 2, 2, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid 10% ITC w MACRS", 3.70),
        (4, 6, 1, 1, 3, 2, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 mid 10% ITC w MACRS", 3.70),
        (4, 6, 1, 1, 1, 2, 12, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high 10% ITC w MACRS", 4.00),
        (4, 6, 1, 1, 2, 2, 12, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high 10% ITC w MACRS", 4.00),
        (4, 6, 1, 1, 3, 2, 12, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "comm_GSHP-heat 2013 high 10% ITC w MACRS", 4.00),
        (4, 6, 1, 1, 1, 46, 1, 0.054, 0.056, 0.061, 0.075, 0.075, 0.057, 0.043,
         0.037, 0.028, 0.041, 0.039, 0.041, 0.041, 0.043, 0.043, 0.046, 0.047,
         "elec_boiler 2003 installed base", 0.94),
        (4, 6, 1, 1, 2, 46, 1, 0.111, 0.115, 0.118, 0.121, 0.119, 0.123, 0.125,
         0.126, 0.127, 0.127, 0.130, 0.131, 0.132, 0.133, 0.140, 0.135, 0.136,
         "elec_boiler 2003 installed base", 0.94),
        (4, 6, 1, 1, 3, 46, 1, 1.149, 1.208, 1.267, 1.330, 1.403, 1.468, 1.512,
         1.544, 1.567, 1.580, 1.604, 1.627, 1.651, 1.673, 1.696, 1.723, 1.746,
         "elec_boiler 2003 installed base", 0.94),
        (4, 6, 1, 1, 1, 46, 2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "elec_boiler 2012 installed base", 0.94),
        (4, 6, 1, 1, 2, 46, 2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "elec_boiler 2012 installed base", 0.94),
        (4, 6, 1, 1, 3, 46, 2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "elec_boiler 2012 installed base", 0.94),
        (2, 8, 4, 1, 1, 31, 1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2003 installed base", 0.37),
        (2, 8, 4, 1, 2, 31, 1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2003 installed base", 0.37),
        (2, 8, 4, 1, 3, 31, 1, 0.991, 0.929, 0.871, 0.816, 0.765, 0.717, 0.673,
         0.631, 0.591, 0.554, 0.520, 0.487, 0.457, 0.428, 0.402, 0.377, 0.353,
         "CAV_Vent 2003 installed base", 0.37),
        (2, 8, 4, 1, 1, 31, 2, 0.018, 0.019, 0.016, 0.019, 0.018, 0.016, 0.012,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2007 installed base", 0.38),
        (2, 8, 4, 1, 2, 31, 2, 0.054, 0.055, 0.051, 0.051, 0.050, 0.050, 0.050,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2007 installed base", 0.38),
        (2, 8, 4, 1, 3, 31, 2, 0.000, 0.068, 0.132, 0.187, 0.240, 0.289, 0.333,
         0.370, 0.347, 0.325, 0.305, 0.286, 0.268, 0.251, 0.236, 0.221, 0.207,
         "CAV_Vent 2007 installed base", 0.38),
        (2, 8, 4, 1, 1, 31, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2011 minimum", 0.41),
        (2, 8, 4, 1, 2, 31, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2011 minimum", 0.41),
        (2, 8, 4, 1, 3, 31, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2011 minimum", 0.41),
        (2, 8, 4, 1, 1, 31, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.011, 0.011, 0.011, 0.014, 0.016, 0.018, 0.020, 0.021, 0.022, 0.000,
         "CAV_Vent 2011 typical", 0.43),
        (2, 8, 4, 1, 2, 31, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.049, 0.048, 0.048, 0.054, 0.054, 0.054, 0.055, 0.055, 0.056, 0.000,
         "CAV_Vent 2011 typical", 0.43),
        (2, 8, 4, 1, 3, 31, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.056, 0.108, 0.157, 0.211, 0.264, 0.316, 0.366, 0.415, 0.462,
         "CAV_Vent 2011 typical", 0.43),
        (2, 8, 4, 1, 1, 31, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2011 high", 0.48),
        (2, 8, 4, 1, 2, 31, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2011 high", 0.48),
        (2, 8, 4, 1, 3, 31, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.001, 0.002, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.003,
         "CAV_Vent 2011 high", 0.48),
        (2, 8, 4, 1, 1, 31, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.023,
         "CAV_Vent 2020 typical", 0.45),
        (2, 8, 4, 1, 2, 31, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.056,
         "CAV_Vent 2020 typical", 0.45),
        (2, 8, 4, 1, 3, 31, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2020 typical", 0.45),
        (2, 8, 4, 1, 1, 31, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2020 high", 0.51),
        (2, 8, 4, 1, 2, 31, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2020 high", 0.51),
        (2, 8, 4, 1, 3, 31, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "CAV_Vent 2020 high", 0.51),
        (2, 8, 4, 1, 1, 32, 1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 20003 installed base", 1.15),
        (2, 8, 4, 1, 2, 32, 1, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 20003 installed base", 1.15),
        (2, 8, 4, 1, 3, 32, 1, 0.249, 0.234, 0.219, 0.205, 0.192, 0.180, 0.169,
         0.159, 0.149, 0.139, 0.131, 0.123, 0.115, 0.108, 0.101, 0.095, 0.089,
         "VAV_Vent 20003 installed base", 1.15),
        (2, 8, 4, 1, 1, 32, 2, 0.003, 0.003, 0.005, 0.006, 0.006, 0.006, 0.004,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2007 installed base", 1.26),
        (2, 8, 4, 1, 2, 32, 2, 0.011, 0.011, 0.015, 0.015, 0.016, 0.016, 0.017,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2007 installed base", 1.26),
        (2, 8, 4, 1, 3, 32, 2, 0.000, 0.013, 0.026, 0.043, 0.059, 0.077, 0.092,
         0.106, 0.099, 0.093, 0.087, 0.082, 0.077, 0.072, 0.068, 0.063, 0.059,
         "VAV_Vent 2007 installed base", 1.26),
        (2, 8, 4, 1, 1, 32, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 minimum", 1.28),
        (2, 8, 4, 1, 2, 32, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 minimum", 1.28),
        (2, 8, 4, 1, 3, 32, 3, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 minimum", 1.28),
        (2, 8, 4, 1, 1, 32, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.004, 0.004, 0.004, 0.003, 0.003, 0.004, 0.004, 0.004, 0.004, 0.000,
         "VAV_Vent 2011 typical", 1.34),
        (2, 8, 4, 1, 2, 32, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.017, 0.017, 0.017, 0.012, 0.012, 0.012, 0.012, 0.012, 0.012, 0.000,
         "VAV_Vent 2011 typical", 1.34),
        (2, 8, 4, 1, 3, 32, 4, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.020, 0.038, 0.056, 0.067, 0.077, 0.086, 0.096, 0.105, 0.113,
         "VAV_Vent 2011 typical", 1.34),
        (2, 8, 4, 1, 1, 32, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 high", 1.50),
        (2, 8, 4, 1, 2, 32, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 high", 1.50),
        (2, 8, 4, 1, 3, 32, 5, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2011 high", 1.50),
        (2, 8, 4, 1, 1, 32, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.004,
         "VAV_Vent 2020 typical", 1.42),
        (2, 8, 4, 1, 2, 32, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.012,
         "VAV_Vent 2020 typical", 1.42),
        (2, 8, 4, 1, 3, 32, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2020 typical", 1.42),
        (2, 8, 4, 1, 1, 32, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2020 high", 1.59),
        (2, 8, 4, 1, 2, 32, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2020 high", 1.59),
        (2, 8, 4, 1, 3, 32, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         "VAV_Vent 2020 high", 1.59),
        (9, 10, 6, 1, 1, 24, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.001, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
         0.000, "23W CFL 2011 typical", 42.40),
        (9, 10, 6, 1, 2, 24, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.004, 0.004, 0.004, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
         0.000, "23W CFL 2011 typical", 42.40),
        (9, 10, 6, 1, 3, 24, 7, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.016, 0.035, 0.052, 0.065, 0.077, 0.088, 0.100, 0.111, 0.121,
         0.116, "23W CFL 2011 typical", 42.40),
        (9, 10, 6, 1, 1, 24, 8, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.009, "23W CFL 2020 typical", 44.56),
        (9, 10, 6, 1, 2, 24, 8, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.025, "23W CFL 2020 typical", 44.56),
        (9, 10, 6, 1, 3, 24, 8, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "23W CFL 2020 typical", 44.56),
        (9, 10, 6, 1, 1, 24, 9, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "23W CFL 2030 typical", 46.78),
        (9, 10, 6, 1, 2, 24, 9, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "23W CFL 2030 typical", 46.78),
        (9, 10, 6, 1, 3, 24, 9, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "23W CFL 2030 typical", 46.78),
        (9, 10, 6, 1, 1, 24, 15, 0.013, 0.014, 0.014, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2003 installed base", 13.50),
        (9, 10, 6, 1, 2, 24, 15, 0.026, 0.026, 0.027, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2003 installed base", 13.50),
        (9, 10, 6, 1, 3, 24, 15, 0.190, 0.212, 0.232, 0.252, 0.224, 0.199,
         0.173, 0.150, 0.131, 0.102, 0.091, 0.080, 0.071, 0.063, 0.056, 0.050,
         0.040, "90W Halogen PAR-38 2003 installed base", 13.50),
        (9, 10, 6, 1, 1, 24, 16, 0.000, 0.000, 0.000, 0.017, 0.016, 0.017,
         0.012, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2007 installed base", 13.50),
        (9, 10, 6, 1, 2, 24, 16, 0.000, 0.000, 0.000, 0.028, 0.028, 0.029,
         0.029, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2007 installed base", 13.50),
        (9, 10, 6, 1, 3, 24, 16, 0.000, 0.000, 0.000, 0.000, 0.039, 0.067,
         0.089, 0.102, 0.080, 0.063, 0.056, 0.049, 0.044, 0.039, 0.034, 0.030,
         0.025, "90W Halogen PAR-38 2007 installed base", 13.50),
        (9, 10, 6, 1, 1, 24, 17, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2011 typical", 13.70),
        (9, 10, 6, 1, 2, 24, 17, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2011 typical", 13.70),
        (9, 10, 6, 1, 3, 24, 17, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2011 typical", 13.70),
        (9, 10, 6, 1, 1, 24, 18, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2020 typical", 14.34),
        (9, 10, 6, 1, 2, 24, 18, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2020 typical", 14.34),
        (9, 10, 6, 1, 3, 24, 18, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "90W Halogen PAR-38 2020 typical", 14.34),
        (9, 10, 6, 1, 1, 24, 20, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2003 installed base", 16.70),
        (9, 10, 6, 1, 2, 24, 20, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2003 installed base", 16.70),
        (9, 10, 6, 1, 3, 24, 20, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2003 installed base", 16.70),
        (9, 10, 6, 1, 1, 24, 21, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2007 installed base", 16.70),
        (9, 10, 6, 1, 2, 24, 21, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2007 installed base", 16.70),
        (9, 10, 6, 1, 3, 24, 21, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2007 installed base", 16.70),
        (9, 10, 6, 1, 1, 24, 22, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2011 typical", 18.70),
        (9, 10, 6, 1, 2, 24, 22, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2011 typical", 18.70),
        (9, 10, 6, 1, 3, 24, 22, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2011 typical", 18.70),
        (9, 10, 6, 1, 1, 24, 23, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2020 typical", 19.60),
        (9, 10, 6, 1, 2, 24, 23, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2020 typical", 19.60),
        (9, 10, 6, 1, 3, 24, 23, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "70W HIR PAR-38 2020 typical", 19.60),
        (9, 10, 6, 1, 1, 24, 25, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2003 installed base", 15.05),
        (9, 10, 6, 1, 2, 24, 25, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2003 installed base", 15.05),
        (9, 10, 6, 1, 3, 24, 25, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2003 installed base", 15.05),
        (9, 10, 6, 1, 1, 24, 26, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2007 installed base", 51.00),
        (9, 10, 6, 1, 2, 24, 26, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2007 installed base", 51.00),
        (9, 10, 6, 1, 3, 24, 26, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2007 installed base", 51.00),
        (9, 10, 6, 1, 1, 24, 27, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2011 typical", 60.00),
        (9, 10, 6, 1, 2, 24, 27, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2011 typical", 60.00),
        (9, 10, 6, 1, 3, 24, 27, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2011 typical", 60.00),
        (9, 10, 6, 1, 1, 24, 28, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.016, "LED Edison 2020 typical", 170.00),
        (9, 10, 6, 1, 2, 24, 28, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.042, "LED Edison 2020 typical", 170.00),
        (9, 10, 6, 1, 3, 24, 28, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.031, "LED Edison 2020 typical", 170.00),
        (9, 10, 6, 1, 1, 24, 29, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2030 typical", 202.00),
        (9, 10, 6, 1, 2, 24, 29, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2030 typical", 202.00),
        (9, 10, 6, 1, 3, 24, 29, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "LED Edison 2030 typical", 202.00),
        (9, 10, 6, 1, 1, 25, 1, 0.049, 0.052, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F34T12", 41.60),
        (9, 10, 6, 1, 2, 25, 1, 0.098, 0.100, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F34T12", 41.60),
        (9, 10, 6, 1, 3, 25, 1, 0.029, 0.118, 0.182, 0.122, 0.077, 0.048,
         0.030, 0.018, 0.011, 0.007, 0.004, 0.003, 0.002, 0.001, 0.001, 0.000,
         0.000, "F34T12", 41.60),
        (9, 10, 6, 1, 1, 25, 2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "T8 F32 EEMag (e)", 59.00),
        (9, 10, 6, 1, 2, 25, 2, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "T8 F32 EEMag (e)", 59.00),
        (9, 10, 6, 1, 3, 25, 2, 0.120, 0.111, 0.102, 0.094, 0.084, 0.075,
         0.066, 0.057, 0.049, 0.043, 0.038, 0.034, 0.030, 0.026, 0.024, 0.021,
         0.019, "T8 F32 EEMag (e)", 59.00),
        (9, 10, 6, 1, 1, 25, 9, 0.083, 0.088, 0.091, 0.106, 0.094, 0.100,
         0.069, 0.062, 0.082, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2011 typical", 151.13),
        (9, 10, 6, 1, 2, 25, 9, 0.167, 0.170, 0.174, 0.178, 0.166, 0.172,
         0.171, 0.172, 0.174, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2011 typical", 151.13),
        (9, 10, 6, 1, 3, 25, 9, 0.163, 0.381, 0.590, 0.789, 0.990, 1.155,
         1.318, 1.437, 1.543, 1.661, 1.534, 1.416, 1.307, 1.207, 1.114, 1.028,
         0.949, "F28T8 HE w/ OS 2011 typical", 151.13),
        (9, 10, 6, 1, 1, 25, 10, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.077, "F28T8 HE w/ OS 2020 typical", 162.49),
        (9, 10, 6, 1, 2, 25, 10, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.207, "F28T8 HE w/ OS 2020 typical", 162.49),
        (9, 10, 6, 1, 3, 25, 10, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2020 typical", 162.49),
        (9, 10, 6, 1, 1, 25, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2030 typical", 165.16),
        (9, 10, 6, 1, 2, 25, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2030 typical", 165.16),
        (9, 10, 6, 1, 3, 25, 11, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE w/ OS 2030 typical", 165.16),
        (9, 10, 6, 1, 1, 25, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE 2011 typical", 58.19),
        (9, 10, 6, 1, 2, 25, 6, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, "F28T8 HE 2011 typical", 58.19),
        (9, 10, 6, 1, 3, 25, 6, 0.661, 0.610, 0.563, 0.519, 0.460, 0.408,
         0.357, 0.309, 0.268, 0.233, 0.206, 0.183, 0.162, 0.144, 0.127, 0.113,
         0.100, "F28T8 HE 2011 typical", 58.19),
        (9, 10, 6, 1, 1, 25, 15, 0.015, 0.015, 0.015, 0.015, 0.016, 0.035,
         0.016, 0.010, 0.022, 0.064, 0.079, 0.086, 0.099, 0.114, 0.123, 0.126,
         0.000, 'F28T8 HE w/ OS & SR 2011 typical', 178.7),
        (9, 10, 6, 1, 2, 25, 15, 0.030, 0.031, 0.032, 0.032, 0.038, 0.096,
         0.045, 0.047, 0.105, 0.233, 0.234, 0.237, 0.240, 0.244, 0.249, 0.255,
         0.000, 'F28T8 HE w/ OS & SR 2011 typical', 178.7),
        (9, 10, 6, 1, 3, 25, 15, 0.002, 0.047, 0.090, 0.130, 0.254, 0.375,
         0.573, 0.688, 0.781, 0.923, 1.174, 1.418, 1.650, 1.876, 2.101, 2.321,
         2.494, 'F28T8 HE w/ OS & SR 2011 typical', 178.7),
        (9, 10, 6, 1, 1, 25, 16, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.022, 'F28T8 HE w/ OS & SR 2020 typical', 192.14),
        (9, 10, 6, 1, 2, 25, 16, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.044, 'F28T8 HE w/ OS & SR 2020 typical', 192.14),
        (9, 10, 6, 1, 3, 25, 16, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.041, 'F28T8 HE w/ OS & SR 2020 typical', 192.14),
        (9, 10, 6, 1, 1, 25, 17, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 'F28T8 HE w/ OS & SR 2030 typical', 195.29),
        (9, 10, 6, 1, 2, 25, 17, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 'F28T8 HE w/ OS & SR 2030 typical', 195.29),
        (9, 10, 6, 1, 3, 25, 17, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
         0.000, 'F28T8 HE w/ OS & SR 2030 typical', 195.29),
        (3, 4, 5, 1, 1, 34, 1, 0.017, 0.019, 0.021, 0.020, 0.018, 0.013, 0.009,
         0.008, 0.009, 0.010, 0.011, 0.012, 0.013, 0.013, 0.013, 0.013, 0.013,
         'Range, Electric, 4 burner, oven, 11-inch gr', 0.70),
        (3, 4, 5, 1, 2, 34, 1, 0.082, 0.082, 0.082, 0.083, 0.081, 0.082, 0.081,
         0.081, 0.080, 0.079, 0.079, 0.079, 0.078, 0.078, 0.078, 0.078, 0.078,
         'Range, Electric, 4 burner, oven, 11-inch gr', 0.70),
        (3, 4, 5, 1, 3, 34, 1, 1.465, 1.388, 1.322, 1.265, 1.214, 1.166, 1.120,
         1.074, 1.033, 0.996, 0.964, 0.935, 0.910, 0.889, 0.871, 0.854, 0.840,
         'Range, Electric, 4 burner, oven, 11-inch gr', 0.70),
        (3, 4, 5, 1, 1, 34, 2, 0.016, 0.017, 0.019, 0.018, 0.018, 0.012, 0.008,
         0.008, 0.009, 0.009, 0.010, 0.011, 0.012, 0.013, 0.013, 0.013, 0.012,
         'Range, Electric-induction, 4 burner, oven, 1', 0.80),
        (3, 4, 5, 1, 2, 34, 2, 0.074, 0.075, 0.075, 0.075, 0.078, 0.078, 0.078,
         0.078, 0.077, 0.077, 0.076, 0.076, 0.076, 0.075, 0.075, 0.075, 0.075,
         'Range, Electric-induction, 4 burner, oven, 1', 0.80),
        (3, 4, 5, 1, 3, 34, 2, 0.000, 0.080, 0.152, 0.218, 0.277, 0.331, 0.374,
         0.409, 0.440, 0.467, 0.491, 0.512, 0.532, 0.551, 0.567, 0.582, 0.595,
         'Range, Electric-induction, 4 burner, oven, 1', 0.80),
        (3, 4, 5, 2, 1, 35, 1, 0.136, 0.109, 0.120, 0.117, 0.111, 0.077, 0.053,
         0.074, 0.084, 0.086, 0.067, 0.107, 0.117, 0.124, 0.126, 0.126, 0.088,
         'Range, Gas, 4 burner, oven, 11-inch griddle', 0.45),
        (3, 4, 5, 2, 2, 35, 1, 0.472, 0.345, 0.352, 0.359, 0.354, 0.365, 0.366,
         0.520, 0.522, 0.524, 0.370, 0.528, 0.532, 0.537, 0.542, 0.548, 0.390,
         'Range, Gas, 4 burner, oven, 11-inch griddle', 0.45),
        (3, 4, 5, 2, 3, 35, 1, 3.467, 3.617, 3.614, 3.627, 3.644, 3.649, 3.633,
         3.598, 3.723, 3.844, 3.955, 3.899, 4.026, 4.150, 4.272, 4.387, 4.494,
         'Range, Gas, 4 burner, oven, 11-inch griddle', 0.45),
        (3, 4, 5, 2, 1, 35, 2, 0.051, 0.099, 0.109, 0.107, 0.108, 0.074, 0.051,
         0.028, 0.032, 0.033, 0.065, 0.041, 0.045, 0.047, 0.048, 0.048, 0.085,
         'Range, Gas, 4 powered burners, convect. oven', 0.60),
        (3, 4, 5, 2, 2, 35, 2, 0.176, 0.314, 0.319, 0.326, 0.345, 0.347, 0.353,
         0.199, 0.199, 0.200, 0.357, 0.202, 0.204, 0.206, 0.208, 0.210, 0.376,
         'Range, Gas, 4 powered burners, convect. oven', 0.60),
        (3, 4, 5, 2, 3, 35, 2, 2.311, 2.253, 2.366, 2.481, 2.588, 2.700, 2.772,
         2.820, 2.706, 2.608, 2.522, 2.613, 2.536, 2.473, 2.420, 2.377, 2.339,
         'Range, Gas, 4 powered burners, convect. oven', 0.60)],
        dtype=[('r', '<i4'), ('b', '<i4'), ('s', '<i4'), ('f', '<i4'),
               ('d', '<i4'), ('t', '<i4'), ('v', '<i4'), ('2004', '<f8'),
               ('2005', '<f8'), ('2006', '<f8'), ('2007', '<f8'),
               ('2008', '<f8'), ('2009', '<f8'), ('2010', '<f8'),
               ('2011', '<f8'), ('2012', '<f8'), ('2013', '<f8'),
               ('2014', '<f8'), ('2015', '<f8'), ('2016', '<f8'),
               ('2017', '<f8'), ('2018', '<f8'), ('2019', '<f8'),
               ('2020', '<f8'), ('Description', '<U50'), ('Eff', '<f8')])

    # Define a structured array of time preference premium data that
    # represent the buying preferences of consumers/building owners
    # in the commercial sector as a function (indirectly) of their
    # discount rate, represented in the format and structure in which
    # the data are expected to be imported
    prem_data = np.array([
        (0.267, 10.0, 2009, 'Space Heating'),
        (0.226, 1.0, 2009, 'Space Heating'),
        (0.197, 0.45, 2009, 'Space Heating'),
        (0.189, 0.25, 2009, 'Space Heating'),
        (0.105, 0.15, 2009, 'Space Heating'),
        (0.013, 0.065, 2009, 'Space Heating'),
        (0.003, 0.0, 2009, 'Space Heating'),
        (0.267, 10.0, 2009, 'Space Cooling'),
        (0.225, 1.0, 2009, 'Space Cooling'),
        (0.194, 0.45, 2009, 'Space Cooling'),
        (0.19, 0.25, 2009, 'Space Cooling'),
        (0.106, 0.15, 2009, 'Space Cooling'),
        (0.015, 0.065, 2009, 'Space Cooling'),
        (0.003, 0.0, 2009, 'Space Cooling'),
        (0.266, 10.0, 2009, 'Hot Water Heating'),
        (0.248, 1.0, 2009, 'Hot Water Heating'),
        (0.214, 0.45, 2009, 'Hot Water Heating'),
        (0.167, 0.25, 2009, 'Hot Water Heating'),
        (0.097, 0.15, 2009, 'Hot Water Heating'),
        (0.005, 0.065, 2009, 'Hot Water Heating'),
        (0.003, 0.0, 2009, 'Hot Water Heating'),
        (0.267, 10.0, 2009, 'Ventilation'),
        (0.226, 1.0, 2009, 'Ventilation'),
        (0.197, 0.45, 2009, 'Ventilation'),
        (0.189, 0.25, 2009, 'Ventilation'),
        (0.105, 0.15, 2009, 'Ventilation'),
        (0.013, 0.065, 2009, 'Ventilation'),
        (0.003, 0.0, 2009, 'Ventilation'),
        (0.265, 10.0, 2009, 'Cooking'),
        (0.247, 1.0, 2009, 'Cooking'),
        (0.216, 0.45, 2009, 'Cooking'),
        (0.169, 0.25, 2009, 'Cooking'),
        (0.096, 0.15, 2009, 'Cooking'),
        (0.004, 0.065, 2009, 'Cooking'),
        (0.003, 0.0, 2009, 'Cooking'),
        (0.266, 10.0, 2009, 'Lighting'),
        (0.224, 1.0, 2009, 'Lighting'),
        (0.195, 0.45, 2009, 'Lighting'),
        (0.192, 0.25, 2009, 'Lighting'),
        (0.085, 0.15, 2009, 'Lighting'),
        (0.012, 0.065, 2009, 'Lighting'),
        (0.026, 0.0, 2009, 'Lighting'),
        (0.266, 10.0, 2009, 'Refrigeration'),
        (0.247, 1.0, 2009, 'Refrigeration'),
        (0.214, 0.45, 2009, 'Refrigeration'),
        (0.168, 0.25, 2009, 'Refrigeration'),
        (0.097, 0.15, 2009, 'Refrigeration'),
        (0.005, 0.065, 2009, 'Refrigeration'),
        (0.003, 0.0, 2009, 'Refrigeration'),
        (0.265, 10.0, 2010, 'Space Heating'),
        (0.226, 1.0, 2010, 'Space Heating'),
        (0.186, 0.45, 2010, 'Space Heating'),
        (0.184, 0.25, 2010, 'Space Heating'),
        (0.115, 0.15, 2010, 'Space Heating'),
        (0.019, 0.065, 2010, 'Space Heating'),
        (0.005, 0.0, 2010, 'Space Heating'),
        (0.264, 10.0, 2010, 'Space Cooling'),
        (0.225, 1.0, 2010, 'Space Cooling'),
        (0.18, 0.45, 2010, 'Space Cooling'),
        (0.185, 0.25, 2010, 'Space Cooling'),
        (0.114, 0.15, 2010, 'Space Cooling'),
        (0.024, 0.065, 2010, 'Space Cooling'),
        (0.008, 0.0, 2010, 'Space Cooling'),
        (0.263, 10.0, 2010, 'Hot Water Heating'),
        (0.249, 1.0, 2010, 'Hot Water Heating'),
        (0.216, 0.45, 2010, 'Hot Water Heating'),
        (0.163, 0.25, 2010, 'Hot Water Heating'),
        (0.095, 0.15, 2010, 'Hot Water Heating'),
        (0.004, 0.065, 2010, 'Hot Water Heating'),
        (0.01, 0.0, 2010, 'Hot Water Heating'),
        (0.265, 10.0, 2010, 'Ventilation'),
        (0.226, 1.0, 2010, 'Ventilation'),
        (0.186, 0.45, 2010, 'Ventilation'),
        (0.184, 0.25, 2010, 'Ventilation'),
        (0.115, 0.15, 2010, 'Ventilation'),
        (0.019, 0.065, 2010, 'Ventilation'),
        (0.005, 0.0, 2010, 'Ventilation'),
        (0.261, 10.0, 2010, 'Cooking'),
        (0.248, 1.0, 2010, 'Cooking'),
        (0.218, 0.45, 2010, 'Cooking'),
        (0.165, 0.25, 2010, 'Cooking'),
        (0.09, 0.15, 2010, 'Cooking'),
        (0.003, 0.065, 2010, 'Cooking'),
        (0.015, 0.0, 2010, 'Cooking'),
        (0.264, 10.0, 2010, 'Lighting'),
        (0.225, 1.0, 2010, 'Lighting'),
        (0.18, 0.45, 2010, 'Lighting'),
        (0.185, 0.25, 2010, 'Lighting'),
        (0.092, 0.15, 2010, 'Lighting'),
        (0.022, 0.065, 2010, 'Lighting'),
        (0.032, 0.0, 2010, 'Lighting'),
        (0.263, 10.0, 2010, 'Refrigeration'),
        (0.248, 1.0, 2010, 'Refrigeration'),
        (0.217, 0.45, 2010, 'Refrigeration'),
        (0.164, 0.25, 2010, 'Refrigeration'),
        (0.092, 0.15, 2010, 'Refrigeration'),
        (0.004, 0.065, 2010, 'Refrigeration'),
        (0.012, 0.0, 2010, 'Refrigeration'),
        (0.265, 10.0, 2011, 'Space Heating'),
        (0.226, 1.0, 2011, 'Space Heating'),
        (0.183, 0.45, 2011, 'Space Heating'),
        (0.183, 0.25, 2011, 'Space Heating'),
        (0.113, 0.15, 2011, 'Space Heating'),
        (0.02, 0.065, 2011, 'Space Heating'),
        (0.01, 0.0, 2011, 'Space Heating'),
        (0.264, 10.0, 2011, 'Space Cooling'),
        (0.225, 1.0, 2011, 'Space Cooling'),
        (0.176, 0.45, 2011, 'Space Cooling'),
        (0.182, 0.25, 2011, 'Space Cooling'),
        (0.111, 0.15, 2011, 'Space Cooling'),
        (0.026, 0.065, 2011, 'Space Cooling'),
        (0.016, 0.0, 2011, 'Space Cooling'),
        (0.263, 10.0, 2011, 'Hot Water Heating'),
        (0.249, 1.0, 2011, 'Hot Water Heating'),
        (0.212, 0.45, 2011, 'Hot Water Heating'),
        (0.161, 0.25, 2011, 'Hot Water Heating'),
        (0.091, 0.15, 2011, 'Hot Water Heating'),
        (0.003, 0.065, 2011, 'Hot Water Heating'),
        (0.021, 0.0, 2011, 'Hot Water Heating'),
        (0.265, 10.0, 2011, 'Ventilation'),
        (0.226, 1.0, 2011, 'Ventilation'),
        (0.183, 0.45, 2011, 'Ventilation'),
        (0.183, 0.25, 2011, 'Ventilation'),
        (0.113, 0.15, 2011, 'Ventilation'),
        (0.02, 0.065, 2011, 'Ventilation'),
        (0.01, 0.0, 2011, 'Ventilation'),
        (0.261, 10.0, 2011, 'Cooking'),
        (0.248, 1.0, 2011, 'Cooking'),
        (0.214, 0.45, 2011, 'Cooking'),
        (0.158, 0.25, 2011, 'Cooking'),
        (0.086, 0.15, 2011, 'Cooking'),
        (0.003, 0.065, 2011, 'Cooking'),
        (0.03, 0.0, 2011, 'Cooking'),
        (0.264, 10.0, 2011, 'Lighting'),
        (0.225, 1.0, 2011, 'Lighting'),
        (0.177, 0.45, 2011, 'Lighting'),
        (0.184, 0.25, 2011, 'Lighting'),
        (0.09, 0.15, 2011, 'Lighting'),
        (0.026, 0.065, 2011, 'Lighting'),
        (0.034, 0.0, 2011, 'Lighting'),
        (0.262, 10.0, 2011, 'Refrigeration'),
        (0.248, 1.0, 2011, 'Refrigeration'),
        (0.212, 0.45, 2011, 'Refrigeration'),
        (0.162, 0.25, 2011, 'Refrigeration'),
        (0.088, 0.15, 2011, 'Refrigeration'),
        (0.003, 0.065, 2011, 'Refrigeration'),
        (0.025, 0.0, 2011, 'Refrigeration'),
        (0.265, 10.0, 2012, 'Space Heating'),
        (0.226, 1.0, 2012, 'Space Heating'),
        (0.182, 0.45, 2012, 'Space Heating'),
        (0.179, 0.25, 2012, 'Space Heating'),
        (0.108, 0.15, 2012, 'Space Heating'),
        (0.037, 0.065, 2012, 'Space Heating'),
        (0.003, 0.0, 2012, 'Space Heating'),
        (0.264, 10.0, 2012, 'Space Cooling'),
        (0.225, 1.0, 2012, 'Space Cooling'),
        (0.174, 0.45, 2012, 'Space Cooling'),
        (0.178, 0.25, 2012, 'Space Cooling'),
        (0.105, 0.15, 2012, 'Space Cooling'),
        (0.049, 0.065, 2012, 'Space Cooling'),
        (0.005, 0.0, 2012, 'Space Cooling'),
        (0.263, 10.0, 2012, 'Hot Water Heating'),
        (0.249, 1.0, 2012, 'Hot Water Heating'),
        (0.212, 0.45, 2012, 'Hot Water Heating'),
        (0.16, 0.25, 2012, 'Hot Water Heating'),
        (0.094, 0.15, 2012, 'Hot Water Heating'),
        (0.018, 0.065, 2012, 'Hot Water Heating'),
        (0.004, 0.0, 2012, 'Hot Water Heating'),
        (0.265, 10.0, 2012, 'Ventilation'),
        (0.226, 1.0, 2012, 'Ventilation'),
        (0.181, 0.45, 2012, 'Ventilation'),
        (0.179, 0.25, 2012, 'Ventilation'),
        (0.11, 0.15, 2012, 'Ventilation'),
        (0.036, 0.065, 2012, 'Ventilation'),
        (0.003, 0.0, 2012, 'Ventilation'),
        (0.261, 10.0, 2012, 'Cooking'),
        (0.248, 1.0, 2012, 'Cooking'),
        (0.215, 0.45, 2012, 'Cooking'),
        (0.162, 0.25, 2012, 'Cooking'),
        (0.087, 0.15, 2012, 'Cooking'),
        (0.019, 0.065, 2012, 'Cooking'),
        (0.008, 0.0, 2012, 'Cooking'),
        (0.264, 10.0, 2012, 'Lighting'),
        (0.225, 1.0, 2012, 'Lighting'),
        (0.177, 0.45, 2012, 'Lighting'),
        (0.183, 0.25, 2012, 'Lighting'),
        (0.091, 0.15, 2012, 'Lighting'),
        (0.026, 0.065, 2012, 'Lighting'),
        (0.034, 0.0, 2012, 'Lighting'),
        (0.262, 10.0, 2012, 'Refrigeration'),
        (0.248, 1.0, 2012, 'Refrigeration'),
        (0.213, 0.45, 2012, 'Refrigeration'),
        (0.162, 0.25, 2012, 'Refrigeration'),
        (0.09, 0.15, 2012, 'Refrigeration'),
        (0.018, 0.065, 2012, 'Refrigeration'),
        (0.007, 0.0, 2012, 'Refrigeration'),
        (0.265, 10.0, 2013, 'Space Heating'),
        (0.226, 1.0, 2013, 'Space Heating'),
        (0.182, 0.45, 2013, 'Space Heating'),
        (0.179, 0.25, 2013, 'Space Heating'),
        (0.108, 0.15, 2013, 'Space Heating'),
        (0.037, 0.065, 2013, 'Space Heating'),
        (0.003, 0.0, 2013, 'Space Heating'),
        (0.264, 10.0, 2013, 'Space Cooling'),
        (0.225, 1.0, 2013, 'Space Cooling'),
        (0.174, 0.45, 2013, 'Space Cooling'),
        (0.178, 0.25, 2013, 'Space Cooling'),
        (0.105, 0.15, 2013, 'Space Cooling'),
        (0.049, 0.065, 2013, 'Space Cooling'),
        (0.005, 0.0, 2013, 'Space Cooling'),
        (0.263, 10.0, 2013, 'Hot Water Heating'),
        (0.249, 1.0, 2013, 'Hot Water Heating'),
        (0.212, 0.45, 2013, 'Hot Water Heating'),
        (0.16, 0.25, 2013, 'Hot Water Heating'),
        (0.094, 0.15, 2013, 'Hot Water Heating'),
        (0.018, 0.065, 2013, 'Hot Water Heating'),
        (0.004, 0.0, 2013, 'Hot Water Heating'),
        (0.265, 10.0, 2013, 'Ventilation'),
        (0.226, 1.0, 2013, 'Ventilation'),
        (0.181, 0.45, 2013, 'Ventilation'),
        (0.179, 0.25, 2013, 'Ventilation'),
        (0.11, 0.15, 2013, 'Ventilation'),
        (0.036, 0.065, 2013, 'Ventilation'),
        (0.003, 0.0, 2013, 'Ventilation'),
        (0.261, 10.0, 2013, 'Cooking'),
        (0.248, 1.0, 2013, 'Cooking'),
        (0.215, 0.45, 2013, 'Cooking'),
        (0.162, 0.25, 2013, 'Cooking'),
        (0.087, 0.15, 2013, 'Cooking'),
        (0.019, 0.065, 2013, 'Cooking'),
        (0.008, 0.0, 2013, 'Cooking'),
        (0.264, 10.0, 2013, 'Lighting'),
        (0.225, 1.0, 2013, 'Lighting'),
        (0.177, 0.45, 2013, 'Lighting'),
        (0.183, 0.25, 2013, 'Lighting'),
        (0.091, 0.15, 2013, 'Lighting'),
        (0.026, 0.065, 2013, 'Lighting'),
        (0.034, 0.0, 2013, 'Lighting'),
        (0.262, 10.0, 2013, 'Refrigeration'),
        (0.248, 1.0, 2013, 'Refrigeration'),
        (0.213, 0.45, 2013, 'Refrigeration'),
        (0.162, 0.25, 2013, 'Refrigeration'),
        (0.09, 0.15, 2013, 'Refrigeration'),
        (0.018, 0.065, 2013, 'Refrigeration'),
        (0.007, 0.0, 2013, 'Refrigeration'),
        (0.265, 10.0, 2014, 'Space Heating'),
        (0.226, 1.0, 2014, 'Space Heating'),
        (0.196, 0.45, 2014, 'Space Heating'),
        (0.192, 0.25, 2014, 'Space Heating'),
        (0.105, 0.15, 2014, 'Space Heating'),
        (0.013, 0.065, 2014, 'Space Heating'),
        (0.003, 0.0, 2014, 'Space Heating'),
        (0.264, 10.0, 2014, 'Space Cooling'),
        (0.225, 1.0, 2014, 'Space Cooling'),
        (0.193, 0.45, 2014, 'Space Cooling'),
        (0.192, 0.25, 2014, 'Space Cooling'),
        (0.106, 0.15, 2014, 'Space Cooling'),
        (0.016, 0.065, 2014, 'Space Cooling'),
        (0.004, 0.0, 2014, 'Space Cooling'),
        (0.263, 10.0, 2014, 'Hot Water Heating'),
        (0.249, 1.0, 2014, 'Hot Water Heating'),
        (0.212, 0.45, 2014, 'Hot Water Heating'),
        (0.169, 0.25, 2014, 'Hot Water Heating'),
        (0.097, 0.15, 2014, 'Hot Water Heating'),
        (0.006, 0.065, 2014, 'Hot Water Heating'),
        (0.004, 0.0, 2014, 'Hot Water Heating'),
        (0.265, 10.0, 2014, 'Ventilation'),
        (0.226, 1.0, 2014, 'Ventilation'),
        (0.196, 0.45, 2014, 'Ventilation'),
        (0.192, 0.25, 2014, 'Ventilation'),
        (0.105, 0.15, 2014, 'Ventilation'),
        (0.013, 0.065, 2014, 'Ventilation'),
        (0.003, 0.0, 2014, 'Ventilation'),
        (0.261, 10.0, 2014, 'Cooking'),
        (0.248, 1.0, 2014, 'Cooking'),
        (0.214, 0.45, 2014, 'Cooking'),
        (0.171, 0.25, 2014, 'Cooking'),
        (0.097, 0.15, 2014, 'Cooking'),
        (0.005, 0.065, 2014, 'Cooking'),
        (0.004, 0.0, 2014, 'Cooking'),
        (0.264, 10.0, 2014, 'Lighting'),
        (0.225, 1.0, 2014, 'Lighting'),
        (0.193, 0.45, 2014, 'Lighting'),
        (0.193, 0.25, 2014, 'Lighting'),
        (0.085, 0.15, 2014, 'Lighting'),
        (0.013, 0.065, 2014, 'Lighting'),
        (0.027, 0.0, 2014, 'Lighting'),
        (0.262, 10.0, 2014, 'Refrigeration'),
        (0.248, 1.0, 2014, 'Refrigeration'),
        (0.213, 0.45, 2014, 'Refrigeration'),
        (0.17, 0.25, 2014, 'Refrigeration'),
        (0.097, 0.15, 2014, 'Refrigeration'),
        (0.006, 0.065, 2014, 'Refrigeration'),
        (0.004, 0.0, 2014, 'Refrigeration'),
        (0.265, 10.0, 2015, 'Space Heating'),
        (0.226, 1.0, 2015, 'Space Heating'),
        (0.196, 0.45, 2015, 'Space Heating'),
        (0.192, 0.25, 2015, 'Space Heating'),
        (0.105, 0.15, 2015, 'Space Heating'),
        (0.013, 0.065, 2015, 'Space Heating'),
        (0.003, 0.0, 2015, 'Space Heating'),
        (0.264, 10.0, 2015, 'Space Cooling'),
        (0.225, 1.0, 2015, 'Space Cooling'),
        (0.193, 0.45, 2015, 'Space Cooling'),
        (0.192, 0.25, 2015, 'Space Cooling'),
        (0.106, 0.15, 2015, 'Space Cooling'),
        (0.016, 0.065, 2015, 'Space Cooling'),
        (0.004, 0.0, 2015, 'Space Cooling'),
        (0.263, 10.0, 2015, 'Hot Water Heating'),
        (0.249, 1.0, 2015, 'Hot Water Heating'),
        (0.212, 0.45, 2015, 'Hot Water Heating'),
        (0.169, 0.25, 2015, 'Hot Water Heating'),
        (0.097, 0.15, 2015, 'Hot Water Heating'),
        (0.006, 0.065, 2015, 'Hot Water Heating'),
        (0.004, 0.0, 2015, 'Hot Water Heating'),
        (0.265, 10.0, 2015, 'Ventilation'),
        (0.226, 1.0, 2015, 'Ventilation'),
        (0.196, 0.45, 2015, 'Ventilation'),
        (0.192, 0.25, 2015, 'Ventilation'),
        (0.105, 0.15, 2015, 'Ventilation'),
        (0.013, 0.065, 2015, 'Ventilation'),
        (0.003, 0.0, 2015, 'Ventilation'),
        (0.261, 10.0, 2015, 'Cooking'),
        (0.248, 1.0, 2015, 'Cooking'),
        (0.214, 0.45, 2015, 'Cooking'),
        (0.171, 0.25, 2015, 'Cooking'),
        (0.097, 0.15, 2015, 'Cooking'),
        (0.005, 0.065, 2015, 'Cooking'),
        (0.004, 0.0, 2015, 'Cooking'),
        (0.264, 10.0, 2015, 'Lighting'),
        (0.225, 1.0, 2015, 'Lighting'),
        (0.193, 0.45, 2015, 'Lighting'),
        (0.193, 0.25, 2015, 'Lighting'),
        (0.085, 0.15, 2015, 'Lighting'),
        (0.013, 0.065, 2015, 'Lighting'),
        (0.027, 0.0, 2015, 'Lighting'),
        (0.262, 10.0, 2015, 'Refrigeration'),
        (0.248, 1.0, 2015, 'Refrigeration'),
        (0.213, 0.45, 2015, 'Refrigeration'),
        (0.17, 0.25, 2015, 'Refrigeration'),
        (0.097, 0.15, 2015, 'Refrigeration'),
        (0.006, 0.065, 2015, 'Refrigeration'),
        (0.004, 0.0, 2015, 'Refrigeration'),
        (0.265, 10.0, 2016, 'Space Heating'),
        (0.226, 1.0, 2016, 'Space Heating'),
        (0.196, 0.45, 2016, 'Space Heating'),
        (0.192, 0.25, 2016, 'Space Heating'),
        (0.105, 0.15, 2016, 'Space Heating'),
        (0.013, 0.065, 2016, 'Space Heating'),
        (0.003, 0.0, 2016, 'Space Heating'),
        (0.264, 10.0, 2016, 'Space Cooling'),
        (0.225, 1.0, 2016, 'Space Cooling'),
        (0.193, 0.45, 2016, 'Space Cooling'),
        (0.192, 0.25, 2016, 'Space Cooling'),
        (0.106, 0.15, 2016, 'Space Cooling'),
        (0.016, 0.065, 2016, 'Space Cooling'),
        (0.004, 0.0, 2016, 'Space Cooling'),
        (0.263, 10.0, 2016, 'Hot Water Heating'),
        (0.249, 1.0, 2016, 'Hot Water Heating'),
        (0.212, 0.45, 2016, 'Hot Water Heating'),
        (0.169, 0.25, 2016, 'Hot Water Heating'),
        (0.097, 0.15, 2016, 'Hot Water Heating'),
        (0.006, 0.065, 2016, 'Hot Water Heating'),
        (0.004, 0.0, 2016, 'Hot Water Heating'),
        (0.265, 10.0, 2016, 'Ventilation'),
        (0.226, 1.0, 2016, 'Ventilation'),
        (0.196, 0.45, 2016, 'Ventilation'),
        (0.192, 0.25, 2016, 'Ventilation'),
        (0.105, 0.15, 2016, 'Ventilation'),
        (0.013, 0.065, 2016, 'Ventilation'),
        (0.003, 0.0, 2016, 'Ventilation'),
        (0.261, 10.0, 2016, 'Cooking'),
        (0.248, 1.0, 2016, 'Cooking'),
        (0.214, 0.45, 2016, 'Cooking'),
        (0.171, 0.25, 2016, 'Cooking'),
        (0.097, 0.15, 2016, 'Cooking'),
        (0.005, 0.065, 2016, 'Cooking'),
        (0.004, 0.0, 2016, 'Cooking'),
        (0.264, 10.0, 2016, 'Lighting'),
        (0.225, 1.0, 2016, 'Lighting'),
        (0.193, 0.45, 2016, 'Lighting'),
        (0.193, 0.25, 2016, 'Lighting'),
        (0.085, 0.15, 2016, 'Lighting'),
        (0.013, 0.065, 2016, 'Lighting'),
        (0.027, 0.0, 2016, 'Lighting'),
        (0.262, 10.0, 2016, 'Refrigeration'),
        (0.248, 1.0, 2016, 'Refrigeration'),
        (0.213, 0.45, 2016, 'Refrigeration'),
        (0.17, 0.25, 2016, 'Refrigeration'),
        (0.097, 0.15, 2016, 'Refrigeration'),
        (0.006, 0.065, 2016, 'Refrigeration'),
        (0.004, 0.0, 2016, 'Refrigeration'),
        (0.265, 10.0, 2017, 'Space Heating'),
        (0.226, 1.0, 2017, 'Space Heating'),
        (0.196, 0.45, 2017, 'Space Heating'),
        (0.192, 0.25, 2017, 'Space Heating'),
        (0.105, 0.15, 2017, 'Space Heating'),
        (0.013, 0.065, 2017, 'Space Heating'),
        (0.003, 0.0, 2017, 'Space Heating'),
        (0.264, 10.0, 2017, 'Space Cooling'),
        (0.225, 1.0, 2017, 'Space Cooling'),
        (0.193, 0.45, 2017, 'Space Cooling'),
        (0.192, 0.25, 2017, 'Space Cooling'),
        (0.106, 0.15, 2017, 'Space Cooling'),
        (0.016, 0.065, 2017, 'Space Cooling'),
        (0.004, 0.0, 2017, 'Space Cooling'),
        (0.263, 10.0, 2017, 'Hot Water Heating'),
        (0.249, 1.0, 2017, 'Hot Water Heating'),
        (0.212, 0.45, 2017, 'Hot Water Heating'),
        (0.169, 0.25, 2017, 'Hot Water Heating'),
        (0.097, 0.15, 2017, 'Hot Water Heating'),
        (0.006, 0.065, 2017, 'Hot Water Heating'),
        (0.004, 0.0, 2017, 'Hot Water Heating'),
        (0.265, 10.0, 2017, 'Ventilation'),
        (0.226, 1.0, 2017, 'Ventilation'),
        (0.196, 0.45, 2017, 'Ventilation'),
        (0.192, 0.25, 2017, 'Ventilation'),
        (0.105, 0.15, 2017, 'Ventilation'),
        (0.013, 0.065, 2017, 'Ventilation'),
        (0.003, 0.0, 2017, 'Ventilation'),
        (0.261, 10.0, 2017, 'Cooking'),
        (0.248, 1.0, 2017, 'Cooking'),
        (0.214, 0.45, 2017, 'Cooking'),
        (0.171, 0.25, 2017, 'Cooking'),
        (0.097, 0.15, 2017, 'Cooking'),
        (0.005, 0.065, 2017, 'Cooking'),
        (0.004, 0.0, 2017, 'Cooking'),
        (0.264, 10.0, 2017, 'Lighting'),
        (0.225, 1.0, 2017, 'Lighting'),
        (0.193, 0.45, 2017, 'Lighting'),
        (0.193, 0.25, 2017, 'Lighting'),
        (0.085, 0.15, 2017, 'Lighting'),
        (0.013, 0.065, 2017, 'Lighting'),
        (0.027, 0.0, 2017, 'Lighting'),
        (0.262, 10.0, 2017, 'Refrigeration'),
        (0.248, 1.0, 2017, 'Refrigeration'),
        (0.213, 0.45, 2017, 'Refrigeration'),
        (0.17, 0.25, 2017, 'Refrigeration'),
        (0.097, 0.15, 2017, 'Refrigeration'),
        (0.006, 0.065, 2017, 'Refrigeration'),
        (0.004, 0.0, 2017, 'Refrigeration'),
        (0.265, 10.0, 2018, 'Space Heating'),
        (0.226, 1.0, 2018, 'Space Heating'),
        (0.196, 0.45, 2018, 'Space Heating'),
        (0.192, 0.25, 2018, 'Space Heating'),
        (0.105, 0.15, 2018, 'Space Heating'),
        (0.013, 0.065, 2018, 'Space Heating'),
        (0.003, 0.0, 2018, 'Space Heating'),
        (0.264, 10.0, 2018, 'Space Cooling'),
        (0.225, 1.0, 2018, 'Space Cooling'),
        (0.193, 0.45, 2018, 'Space Cooling'),
        (0.192, 0.25, 2018, 'Space Cooling'),
        (0.106, 0.15, 2018, 'Space Cooling'),
        (0.016, 0.065, 2018, 'Space Cooling'),
        (0.004, 0.0, 2018, 'Space Cooling'),
        (0.263, 10.0, 2018, 'Hot Water Heating'),
        (0.249, 1.0, 2018, 'Hot Water Heating'),
        (0.212, 0.45, 2018, 'Hot Water Heating'),
        (0.169, 0.25, 2018, 'Hot Water Heating'),
        (0.097, 0.15, 2018, 'Hot Water Heating'),
        (0.006, 0.065, 2018, 'Hot Water Heating'),
        (0.004, 0.0, 2018, 'Hot Water Heating'),
        (0.265, 10.0, 2018, 'Ventilation'),
        (0.226, 1.0, 2018, 'Ventilation'),
        (0.196, 0.45, 2018, 'Ventilation'),
        (0.192, 0.25, 2018, 'Ventilation'),
        (0.105, 0.15, 2018, 'Ventilation'),
        (0.013, 0.065, 2018, 'Ventilation'),
        (0.003, 0.0, 2018, 'Ventilation'),
        (0.261, 10.0, 2018, 'Cooking'),
        (0.248, 1.0, 2018, 'Cooking'),
        (0.214, 0.45, 2018, 'Cooking'),
        (0.171, 0.25, 2018, 'Cooking'),
        (0.097, 0.15, 2018, 'Cooking'),
        (0.005, 0.065, 2018, 'Cooking'),
        (0.004, 0.0, 2018, 'Cooking'),
        (0.264, 10.0, 2018, 'Lighting'),
        (0.225, 1.0, 2018, 'Lighting'),
        (0.193, 0.45, 2018, 'Lighting'),
        (0.193, 0.25, 2018, 'Lighting'),
        (0.085, 0.15, 2018, 'Lighting'),
        (0.013, 0.065, 2018, 'Lighting'),
        (0.027, 0.0, 2018, 'Lighting'),
        (0.262, 10.0, 2018, 'Refrigeration'),
        (0.248, 1.0, 2018, 'Refrigeration'),
        (0.213, 0.45, 2018, 'Refrigeration'),
        (0.17, 0.25, 2018, 'Refrigeration'),
        (0.097, 0.15, 2018, 'Refrigeration'),
        (0.006, 0.065, 2018, 'Refrigeration'),
        (0.004, 0.0, 2018, 'Refrigeration'),
        (0.265, 10.0, 2019, 'Space Heating'),
        (0.226, 1.0, 2019, 'Space Heating'),
        (0.196, 0.45, 2019, 'Space Heating'),
        (0.192, 0.25, 2019, 'Space Heating'),
        (0.105, 0.15, 2019, 'Space Heating'),
        (0.013, 0.065, 2019, 'Space Heating'),
        (0.003, 0.0, 2019, 'Space Heating'),
        (0.264, 10.0, 2019, 'Space Cooling'),
        (0.225, 1.0, 2019, 'Space Cooling'),
        (0.193, 0.45, 2019, 'Space Cooling'),
        (0.192, 0.25, 2019, 'Space Cooling'),
        (0.106, 0.15, 2019, 'Space Cooling'),
        (0.016, 0.065, 2019, 'Space Cooling'),
        (0.004, 0.0, 2019, 'Space Cooling'),
        (0.263, 10.0, 2019, 'Hot Water Heating'),
        (0.249, 1.0, 2019, 'Hot Water Heating'),
        (0.212, 0.45, 2019, 'Hot Water Heating'),
        (0.169, 0.25, 2019, 'Hot Water Heating'),
        (0.097, 0.15, 2019, 'Hot Water Heating'),
        (0.006, 0.065, 2019, 'Hot Water Heating'),
        (0.004, 0.0, 2019, 'Hot Water Heating'),
        (0.265, 10.0, 2019, 'Ventilation'),
        (0.226, 1.0, 2019, 'Ventilation'),
        (0.196, 0.45, 2019, 'Ventilation'),
        (0.192, 0.25, 2019, 'Ventilation'),
        (0.105, 0.15, 2019, 'Ventilation'),
        (0.013, 0.065, 2019, 'Ventilation'),
        (0.003, 0.0, 2019, 'Ventilation'),
        (0.261, 10.0, 2019, 'Cooking'),
        (0.248, 1.0, 2019, 'Cooking'),
        (0.214, 0.45, 2019, 'Cooking'),
        (0.171, 0.25, 2019, 'Cooking'),
        (0.097, 0.15, 2019, 'Cooking'),
        (0.005, 0.065, 2019, 'Cooking'),
        (0.004, 0.0, 2019, 'Cooking'),
        (0.264, 10.0, 2019, 'Lighting'),
        (0.225, 1.0, 2019, 'Lighting'),
        (0.193, 0.45, 2019, 'Lighting'),
        (0.193, 0.25, 2019, 'Lighting'),
        (0.085, 0.15, 2019, 'Lighting'),
        (0.013, 0.065, 2019, 'Lighting'),
        (0.027, 0.0, 2019, 'Lighting'),
        (0.262, 10.0, 2019, 'Refrigeration'),
        (0.248, 1.0, 2019, 'Refrigeration'),
        (0.213, 0.45, 2019, 'Refrigeration'),
        (0.17, 0.25, 2019, 'Refrigeration'),
        (0.097, 0.15, 2019, 'Refrigeration'),
        (0.006, 0.065, 2019, 'Refrigeration'),
        (0.004, 0.0, 2019, 'Refrigeration'),
        (0.265, 10.0, 2020, 'Space Heating'),
        (0.226, 1.0, 2020, 'Space Heating'),
        (0.196, 0.45, 2020, 'Space Heating'),
        (0.192, 0.25, 2020, 'Space Heating'),
        (0.105, 0.15, 2020, 'Space Heating'),
        (0.013, 0.065, 2020, 'Space Heating'),
        (0.003, 0.0, 2020, 'Space Heating'),
        (0.264, 10.0, 2020, 'Space Cooling'),
        (0.225, 1.0, 2020, 'Space Cooling'),
        (0.193, 0.45, 2020, 'Space Cooling'),
        (0.192, 0.25, 2020, 'Space Cooling'),
        (0.106, 0.15, 2020, 'Space Cooling'),
        (0.016, 0.065, 2020, 'Space Cooling'),
        (0.004, 0.0, 2020, 'Space Cooling'),
        (0.263, 10.0, 2020, 'Hot Water Heating'),
        (0.249, 1.0, 2020, 'Hot Water Heating'),
        (0.212, 0.45, 2020, 'Hot Water Heating'),
        (0.169, 0.25, 2020, 'Hot Water Heating'),
        (0.097, 0.15, 2020, 'Hot Water Heating'),
        (0.006, 0.065, 2020, 'Hot Water Heating'),
        (0.004, 0.0, 2020, 'Hot Water Heating'),
        (0.265, 10.0, 2020, 'Ventilation'),
        (0.226, 1.0, 2020, 'Ventilation'),
        (0.196, 0.45, 2020, 'Ventilation'),
        (0.192, 0.25, 2020, 'Ventilation'),
        (0.105, 0.15, 2020, 'Ventilation'),
        (0.013, 0.065, 2020, 'Ventilation'),
        (0.003, 0.0, 2020, 'Ventilation'),
        (0.261, 10.0, 2020, 'Cooking'),
        (0.248, 1.0, 2020, 'Cooking'),
        (0.214, 0.45, 2020, 'Cooking'),
        (0.171, 0.25, 2020, 'Cooking'),
        (0.097, 0.15, 2020, 'Cooking'),
        (0.005, 0.065, 2020, 'Cooking'),
        (0.004, 0.0, 2020, 'Cooking'),
        (0.264, 10.0, 2020, 'Lighting'),
        (0.225, 1.0, 2020, 'Lighting'),
        (0.193, 0.45, 2020, 'Lighting'),
        (0.193, 0.25, 2020, 'Lighting'),
        (0.085, 0.15, 2020, 'Lighting'),
        (0.013, 0.065, 2020, 'Lighting'),
        (0.027, 0.0, 2020, 'Lighting'),
        (0.262, 10.0, 2020, 'Refrigeration'),
        (0.248, 1.0, 2020, 'Refrigeration'),
        (0.213, 0.45, 2020, 'Refrigeration'),
        (0.17, 0.25, 2020, 'Refrigeration'),
        (0.097, 0.15, 2020, 'Refrigeration'),
        (0.006, 0.065, 2020, 'Refrigeration'),
        (0.004, 0.0, 2020, 'Refrigeration')],
        dtype=[('Proportion', 'f8'), ('Time Pref Premium', 'f8'),
               ('Year', 'i4'), ('End Use', 'U32')])

    # Define a structured array of square footage data of the same
    # format as the EIA AEO output data file for the microsegments
    # specified in 'data_to_select' and the adjacent microsegments,
    # i.e., r = 2, b = 8 is selected and (2, 7), (2, 8), and (2, 9)
    # are included here
    db_data = np.array([
        (2, 7, 0, 0, 20, 1525.461, "SurvFloorTotal"),
        (2, 7, 0, 0, 21, 1528.791, "SurvFloorTotal"),
        (2, 7, 0, 0, 22, 1525.166, "SurvFloorTotal"),
        (2, 7, 0, 0, 23, 1521.850, "SurvFloorTotal"),
        (2, 7, 0, 0, 24, 1518.318, "SurvFloorTotal"),
        (2, 7, 0, 0, 25, 1514.097, "SurvFloorTotal"),
        (2, 7, 0, 0, 26, 1512.099, "SurvFloorTotal"),
        (2, 7, 0, 0, 27, 1513.448, "SurvFloorTotal"),
        (2, 7, 0, 0, 28, 1517.274, "SurvFloorTotal"),
        (2, 7, 0, 0, 29, 1523.635, "SurvFloorTotal"),
        (2, 7, 0, 0, 30, 1531.747, "SurvFloorTotal"),
        (2, 7, 0, 0, 31, 1541.550, "SurvFloorTotal"),
        (2, 8, 0, 0, 20, 1070.280, "SurvFloorTotal"),
        (2, 8, 0, 0, 21, 1073.377, "SurvFloorTotal"),
        (2, 8, 0, 0, 22, 1071.997, "SurvFloorTotal"),
        (2, 8, 0, 0, 23, 1070.500, "SurvFloorTotal"),
        (2, 8, 0, 0, 24, 1068.794, "SurvFloorTotal"),
        (2, 8, 0, 0, 25, 1067.050, "SurvFloorTotal"),
        (2, 8, 0, 0, 26, 1066.738, "SurvFloorTotal"),
        (2, 8, 0, 0, 27, 1068.592, "SurvFloorTotal"),
        (2, 8, 0, 0, 28, 1072.047, "SurvFloorTotal"),
        (2, 8, 0, 0, 29, 1077.116, "SurvFloorTotal"),
        (2, 8, 0, 0, 30, 1083.290, "SurvFloorTotal"),
        (2, 8, 0, 0, 31, 1090.508, "SurvFloorTotal"),
        (2, 9, 0, 0, 20, 1734.794, "SurvFloorTotal"),
        (2, 9, 0, 0, 21, 1750.283, "SurvFloorTotal"),
        (2, 9, 0, 0, 22, 1756.414, "SurvFloorTotal"),
        (2, 9, 0, 0, 23, 1762.179, "SurvFloorTotal"),
        (2, 9, 0, 0, 24, 1767.438, "SurvFloorTotal"),
        (2, 9, 0, 0, 25, 1764.356, "SurvFloorTotal"),
        (2, 9, 0, 0, 26, 1763.586, "SurvFloorTotal"),
        (2, 9, 0, 0, 27, 1765.811, "SurvFloorTotal"),
        (2, 9, 0, 0, 28, 1767.875, "SurvFloorTotal"),
        (2, 9, 0, 0, 29, 1770.818, "SurvFloorTotal"),
        (2, 9, 0, 0, 30, 1774.946, "SurvFloorTotal"),
        (2, 9, 0, 0, 31, 1780.139, "SurvFloorTotal"),
        (3, 3, 0, 0, 20, 233.965, "SurvFloorTotal"),
        (3, 3, 0, 0, 21, 235.499, "SurvFloorTotal"),
        (3, 3, 0, 0, 22, 235.555, "SurvFloorTotal"),
        (3, 3, 0, 0, 23, 235.508, "SurvFloorTotal"),
        (3, 3, 0, 0, 24, 235.890, "SurvFloorTotal"),
        (3, 3, 0, 0, 25, 236.325, "SurvFloorTotal"),
        (3, 3, 0, 0, 26, 237.137, "SurvFloorTotal"),
        (3, 3, 0, 0, 27, 238.435, "SurvFloorTotal"),
        (3, 3, 0, 0, 28, 240.132, "SurvFloorTotal"),
        (3, 3, 0, 0, 29, 242.085, "SurvFloorTotal"),
        (3, 3, 0, 0, 30, 244.125, "SurvFloorTotal"),
        (3, 3, 0, 0, 31, 246.108, "SurvFloorTotal"),
        (3, 4, 0, 0, 20, 264.395, "SurvFloorTotal"),
        (3, 4, 0, 0, 21, 266.170, "SurvFloorTotal"),
        (3, 4, 0, 0, 22, 266.270, "SurvFloorTotal"),
        (3, 4, 0, 0, 23, 266.255, "SurvFloorTotal"),
        (3, 4, 0, 0, 24, 266.728, "SurvFloorTotal"),
        (3, 4, 0, 0, 25, 267.262, "SurvFloorTotal"),
        (3, 4, 0, 0, 26, 268.223, "SurvFloorTotal"),
        (3, 4, 0, 0, 27, 269.736, "SurvFloorTotal"),
        (3, 4, 0, 0, 28, 271.701, "SurvFloorTotal"),
        (3, 4, 0, 0, 29, 273.955, "SurvFloorTotal"),
        (3, 4, 0, 0, 30, 276.307, "SurvFloorTotal"),
        (3, 4, 0, 0, 31, 278.592, "SurvFloorTotal"),
        (3, 5, 0, 0, 20, 356.334, "SurvFloorTotal"),
        (3, 5, 0, 0, 21, 365.683, "SurvFloorTotal"),
        (3, 5, 0, 0, 22, 372.389, "SurvFloorTotal"),
        (3, 5, 0, 0, 23, 380.362, "SurvFloorTotal"),
        (3, 5, 0, 0, 24, 384.101, "SurvFloorTotal"),
        (3, 5, 0, 0, 25, 389.735, "SurvFloorTotal"),
        (3, 5, 0, 0, 26, 395.323, "SurvFloorTotal"),
        (3, 5, 0, 0, 27, 400.956, "SurvFloorTotal"),
        (3, 5, 0, 0, 28, 406.638, "SurvFloorTotal"),
        (3, 5, 0, 0, 29, 412.268, "SurvFloorTotal"),
        (3, 5, 0, 0, 30, 417.766, "SurvFloorTotal"),
        (3, 5, 0, 0, 31, 423.047, "SurvFloorTotal"),
        (4, 5, 0, 0, 20, 135.720, "SurvFloorTotal"),
        (4, 5, 0, 0, 21, 139.394, "SurvFloorTotal"),
        (4, 5, 0, 0, 22, 142.194, "SurvFloorTotal"),
        (4, 5, 0, 0, 23, 144.512, "SurvFloorTotal"),
        (4, 5, 0, 0, 24, 146.798, "SurvFloorTotal"),
        (4, 5, 0, 0, 25, 149.054, "SurvFloorTotal"),
        (4, 5, 0, 0, 26, 151.277, "SurvFloorTotal"),
        (4, 5, 0, 0, 27, 153.491, "SurvFloorTotal"),
        (4, 5, 0, 0, 28, 155.714, "SurvFloorTotal"),
        (4, 5, 0, 0, 29, 157.906, "SurvFloorTotal"),
        (4, 5, 0, 0, 30, 160.043, "SurvFloorTotal"),
        (4, 5, 0, 0, 31, 162.082, "SurvFloorTotal"),
        (4, 6, 0, 0, 20, 656.354, "SurvFloorTotal"),
        (4, 6, 0, 0, 21, 672.209, "SurvFloorTotal"),
        (4, 6, 0, 0, 22, 680.952, "SurvFloorTotal"),
        (4, 6, 0, 0, 23, 685.381, "SurvFloorTotal"),
        (4, 6, 0, 0, 24, 688.561, "SurvFloorTotal"),
        (4, 6, 0, 0, 25, 696.746, "SurvFloorTotal"),
        (4, 6, 0, 0, 26, 703.754, "SurvFloorTotal"),
        (4, 6, 0, 0, 27, 711.383, "SurvFloorTotal"),
        (4, 6, 0, 0, 28, 718.780, "SurvFloorTotal"),
        (4, 6, 0, 0, 29, 727.081, "SurvFloorTotal"),
        (4, 6, 0, 0, 30, 735.454, "SurvFloorTotal"),
        (4, 6, 0, 0, 31, 744.849, "SurvFloorTotal"),
        (4, 7, 0, 0, 20, 226.649, "SurvFloorTotal"),
        (4, 7, 0, 0, 21, 229.102, "SurvFloorTotal"),
        (4, 7, 0, 0, 22, 229.802, "SurvFloorTotal"),
        (4, 7, 0, 0, 23, 229.787, "SurvFloorTotal"),
        (4, 7, 0, 0, 24, 230.189, "SurvFloorTotal"),
        (4, 7, 0, 0, 25, 230.011, "SurvFloorTotal"),
        (4, 7, 0, 0, 26, 230.259, "SurvFloorTotal"),
        (4, 7, 0, 0, 27, 231.199, "SurvFloorTotal"),
        (4, 7, 0, 0, 28, 232.681, "SurvFloorTotal"),
        (4, 7, 0, 0, 29, 234.737, "SurvFloorTotal"),
        (4, 7, 0, 0, 30, 237.162, "SurvFloorTotal"),
        (4, 7, 0, 0, 31, 239.947, "SurvFloorTotal"),
        (9, 9, 0, 0, 20, 2270.986, "SurvFloorTotal"),
        (9, 9, 0, 0, 21, 2312.745, "SurvFloorTotal"),
        (9, 9, 0, 0, 22, 2326.792, "SurvFloorTotal"),
        (9, 9, 0, 0, 23, 2335.095, "SurvFloorTotal"),
        (9, 9, 0, 0, 24, 2348.201, "SurvFloorTotal"),
        (9, 9, 0, 0, 25, 2360.441, "SurvFloorTotal"),
        (9, 9, 0, 0, 26, 2378.492, "SurvFloorTotal"),
        (9, 9, 0, 0, 27, 2402.253, "SurvFloorTotal"),
        (9, 9, 0, 0, 28, 2427.004, "SurvFloorTotal"),
        (9, 9, 0, 0, 29, 2454.502, "SurvFloorTotal"),
        (9, 9, 0, 0, 30, 2484.158, "SurvFloorTotal"),
        (9, 9, 0, 0, 31, 2515.158, "SurvFloorTotal"),
        (9, 10, 0, 0, 20, 1175.162, "SurvFloorTotal"),
        (9, 10, 0, 0, 21, 1192.618, "SurvFloorTotal"),
        (9, 10, 0, 0, 22, 1208.529, "SurvFloorTotal"),
        (9, 10, 0, 0, 23, 1212.964, "SurvFloorTotal"),
        (9, 10, 0, 0, 24, 1217.699, "SurvFloorTotal"),
        (9, 10, 0, 0, 25, 1227.482, "SurvFloorTotal"),
        (9, 10, 0, 0, 26, 1241.872, "SurvFloorTotal"),
        (9, 10, 0, 0, 27, 1258.591, "SurvFloorTotal"),
        (9, 10, 0, 0, 28, 1279.268, "SurvFloorTotal"),
        (9, 10, 0, 0, 29, 1304.965, "SurvFloorTotal"),
        (9, 10, 0, 0, 30, 1333.279, "SurvFloorTotal"),
        (9, 10, 0, 0, 31, 1362.577, "SurvFloorTotal"),
        (9, 11, 0, 0, 20, 553.138, "SurvFloorTotal"),
        (9, 11, 0, 0, 21, 562.053, "SurvFloorTotal"),
        (9, 11, 0, 0, 22, 569.778, "SurvFloorTotal"),
        (9, 11, 0, 0, 23, 580.316, "SurvFloorTotal"),
        (9, 11, 0, 0, 24, 592.598, "SurvFloorTotal"),
        (9, 11, 0, 0, 25, 602.672, "SurvFloorTotal"),
        (9, 11, 0, 0, 26, 612.255, "SurvFloorTotal"),
        (9, 11, 0, 0, 27, 621.202, "SurvFloorTotal"),
        (9, 11, 0, 0, 28, 630.587, "SurvFloorTotal"),
        (9, 11, 0, 0, 29, 641.435, "SurvFloorTotal"),
        (9, 11, 0, 0, 30, 652.556, "SurvFloorTotal"),
        (9, 11, 0, 0, 31, 663.738, "SurvFloorTotal"),
        (2, 7, 0, 0, 20, 21.035, "CMNewFloorSpace"),
        (2, 7, 0, 0, 21, 14.134, "CMNewFloorSpace"),
        (2, 7, 0, 0, 22, 14.489, "CMNewFloorSpace"),
        (2, 7, 0, 0, 23, 14.313, "CMNewFloorSpace"),
        (2, 7, 0, 0, 24, 13.658, "CMNewFloorSpace"),
        (2, 7, 0, 0, 25, 15.908, "CMNewFloorSpace"),
        (2, 7, 0, 0, 26, 19.278, "CMNewFloorSpace"),
        (2, 7, 0, 0, 27, 21.775, "CMNewFloorSpace"),
        (2, 7, 0, 0, 28, 24.329, "CMNewFloorSpace"),
        (2, 7, 0, 0, 29, 26.099, "CMNewFloorSpace"),
        (2, 7, 0, 0, 30, 27.808, "CMNewFloorSpace"),
        (2, 7, 0, 0, 31, 29.159, "CMNewFloorSpace"),
        (2, 8, 0, 0, 20, 17.271, "CMNewFloorSpace"),
        (2, 8, 0, 0, 21, 12.789, "CMNewFloorSpace"),
        (2, 8, 0, 0, 22, 12.664, "CMNewFloorSpace"),
        (2, 8, 0, 0, 23, 12.444, "CMNewFloorSpace"),
        (2, 8, 0, 0, 24, 12.394, "CMNewFloorSpace"),
        (2, 8, 0, 0, 25, 13.812, "CMNewFloorSpace"),
        (2, 8, 0, 0, 26, 15.964, "CMNewFloorSpace"),
        (2, 8, 0, 0, 27, 17.552, "CMNewFloorSpace"),
        (2, 8, 0, 0, 28, 19.156, "CMNewFloorSpace"),
        (2, 8, 0, 0, 29, 20.253, "CMNewFloorSpace"),
        (2, 8, 0, 0, 30, 21.292, "CMNewFloorSpace"),
        (2, 8, 0, 0, 31, 22.093, "CMNewFloorSpace"),
        (2, 9, 0, 0, 20, 41.369, "CMNewFloorSpace"),
        (2, 9, 0, 0, 21, 32.121, "CMNewFloorSpace"),
        (2, 9, 0, 0, 22, 31.863, "CMNewFloorSpace"),
        (2, 9, 0, 0, 23, 31.465, "CMNewFloorSpace"),
        (2, 9, 0, 0, 24, 23.228, "CMNewFloorSpace"),
        (2, 9, 0, 0, 25, 25.640, "CMNewFloorSpace"),
        (2, 9, 0, 0, 26, 28.730, "CMNewFloorSpace"),
        (2, 9, 0, 0, 27, 28.661, "CMNewFloorSpace"),
        (2, 9, 0, 0, 28, 29.627, "CMNewFloorSpace"),
        (2, 9, 0, 0, 29, 30.897, "CMNewFloorSpace"),
        (2, 9, 0, 0, 30, 32.044, "CMNewFloorSpace"),
        (2, 9, 0, 0, 31, 29.985, "CMNewFloorSpace"),
        (3, 3, 0, 0, 20, 3.836, "CMNewFloorSpace"),
        (3, 3, 0, 0, 21, 2.409, "CMNewFloorSpace"),
        (3, 3, 0, 0, 22, 2.359, "CMNewFloorSpace"),
        (3, 3, 0, 0, 23, 2.840, "CMNewFloorSpace"),
        (3, 3, 0, 0, 24, 2.947, "CMNewFloorSpace"),
        (3, 3, 0, 0, 25, 3.377, "CMNewFloorSpace"),
        (3, 3, 0, 0, 26, 3.916, "CMNewFloorSpace"),
        (3, 3, 0, 0, 27, 4.368, "CMNewFloorSpace"),
        (3, 3, 0, 0, 28, 4.676, "CMNewFloorSpace"),
        (3, 3, 0, 0, 29, 4.815, "CMNewFloorSpace"),
        (3, 3, 0, 0, 30, 4.810, "CMNewFloorSpace"),
        (3, 3, 0, 0, 31, 4.792, "CMNewFloorSpace"),
        (3, 4, 0, 0, 20, 5.343, "CMNewFloorSpace"),
        (3, 4, 0, 0, 21, 3.689, "CMNewFloorSpace"),
        (3, 4, 0, 0, 22, 3.596, "CMNewFloorSpace"),
        (3, 4, 0, 0, 23, 4.104, "CMNewFloorSpace"),
        (3, 4, 0, 0, 24, 4.186, "CMNewFloorSpace"),
        (3, 4, 0, 0, 25, 4.633, "CMNewFloorSpace"),
        (3, 4, 0, 0, 26, 5.204, "CMNewFloorSpace"),
        (3, 4, 0, 0, 27, 5.676, "CMNewFloorSpace"),
        (3, 4, 0, 0, 28, 5.985, "CMNewFloorSpace"),
        (3, 4, 0, 0, 29, 6.105, "CMNewFloorSpace"),
        (3, 4, 0, 0, 30, 6.061, "CMNewFloorSpace"),
        (3, 4, 0, 0, 31, 6.004, "CMNewFloorSpace"),
        (3, 5, 0, 0, 20, 14.073, "CMNewFloorSpace"),
        (3, 5, 0, 0, 21, 11.482, "CMNewFloorSpace"),
        (3, 5, 0, 0, 22, 12.799, "CMNewFloorSpace"),
        (3, 5, 0, 0, 23, 8.616, "CMNewFloorSpace"),
        (3, 5, 0, 0, 24, 10.561, "CMNewFloorSpace"),
        (3, 5, 0, 0, 25, 10.564, "CMNewFloorSpace"),
        (3, 5, 0, 0, 26, 10.658, "CMNewFloorSpace"),
        (3, 5, 0, 0, 27, 10.755, "CMNewFloorSpace"),
        (3, 5, 0, 0, 28, 10.752, "CMNewFloorSpace"),
        (3, 5, 0, 0, 29, 10.671, "CMNewFloorSpace"),
        (3, 5, 0, 0, 30, 10.503, "CMNewFloorSpace"),
        (3, 5, 0, 0, 31, 10.285, "CMNewFloorSpace"),
        (4, 5, 0, 0, 20, 5.509, "CMNewFloorSpace"),
        (4, 5, 0, 0, 21, 4.648, "CMNewFloorSpace"),
        (4, 5, 0, 0, 22, 4.180, "CMNewFloorSpace"),
        (4, 5, 0, 0, 23, 4.161, "CMNewFloorSpace"),
        (4, 5, 0, 0, 24, 4.145, "CMNewFloorSpace"),
        (4, 5, 0, 0, 25, 4.127, "CMNewFloorSpace"),
        (4, 5, 0, 0, 26, 4.131, "CMNewFloorSpace"),
        (4, 5, 0, 0, 27, 4.155, "CMNewFloorSpace"),
        (4, 5, 0, 0, 28, 4.139, "CMNewFloorSpace"),
        (4, 5, 0, 0, 29, 4.099, "CMNewFloorSpace"),
        (4, 5, 0, 0, 30, 4.018, "CMNewFloorSpace"),
        (4, 5, 0, 0, 31, 3.923, "CMNewFloorSpace"),
        (4, 6, 0, 0, 20, 24.571, "CMNewFloorSpace"),
        (4, 6, 0, 0, 21, 17.541, "CMNewFloorSpace"),
        (4, 6, 0, 0, 22, 13.308, "CMNewFloorSpace"),
        (4, 6, 0, 0, 23, 12.141, "CMNewFloorSpace"),
        (4, 6, 0, 0, 24, 17.229, "CMNewFloorSpace"),
        (4, 6, 0, 0, 25, 16.133, "CMNewFloorSpace"),
        (4, 6, 0, 0, 26, 16.838, "CMNewFloorSpace"),
        (4, 6, 0, 0, 27, 16.690, "CMNewFloorSpace"),
        (4, 6, 0, 0, 28, 17.681, "CMNewFloorSpace"),
        (4, 6, 0, 0, 29, 17.839, "CMNewFloorSpace"),
        (4, 6, 0, 0, 30, 18.952, "CMNewFloorSpace"),
        (4, 6, 0, 0, 31, 19.808, "CMNewFloorSpace"),
        (4, 7, 0, 0, 20, 4.446, "CMNewFloorSpace"),
        (4, 7, 0, 0, 21, 2.741, "CMNewFloorSpace"),
        (4, 7, 0, 0, 22, 2.072, "CMNewFloorSpace"),
        (4, 7, 0, 0, 23, 2.533, "CMNewFloorSpace"),
        (4, 7, 0, 0, 24, 1.996, "CMNewFloorSpace"),
        (4, 7, 0, 0, 25, 2.462, "CMNewFloorSpace"),
        (4, 7, 0, 0, 26, 3.193, "CMNewFloorSpace"),
        (4, 7, 0, 0, 27, 3.773, "CMNewFloorSpace"),
        (4, 7, 0, 0, 28, 4.384, "CMNewFloorSpace"),
        (4, 7, 0, 0, 29, 4.788, "CMNewFloorSpace"),
        (4, 7, 0, 0, 30, 5.184, "CMNewFloorSpace"),
        (4, 7, 0, 0, 31, 5.516, "CMNewFloorSpace"),
        (9, 9, 0, 0, 20, 70.649, "CMNewFloorSpace"),
        (9, 9, 0, 0, 21, 43.466, "CMNewFloorSpace"),
        (9, 9, 0, 0, 22, 38.245, "CMNewFloorSpace"),
        (9, 9, 0, 0, 23, 43.560, "CMNewFloorSpace"),
        (9, 9, 0, 0, 24, 43.198, "CMNewFloorSpace"),
        (9, 9, 0, 0, 25, 49.502, "CMNewFloorSpace"),
        (9, 9, 0, 0, 26, 55.699, "CMNewFloorSpace"),
        (9, 9, 0, 0, 27, 57.169, "CMNewFloorSpace"),
        (9, 9, 0, 0, 28, 60.390, "CMNewFloorSpace"),
        (9, 9, 0, 0, 29, 63.020, "CMNewFloorSpace"),
        (9, 9, 0, 0, 30, 64.832, "CMNewFloorSpace"),
        (9, 9, 0, 0, 31, 61.281, "CMNewFloorSpace"),
        (9, 10, 0, 0, 20, 28.458, "CMNewFloorSpace"),
        (9, 10, 0, 0, 21, 27.266, "CMNewFloorSpace"),
        (9, 10, 0, 0, 22, 16.135, "CMNewFloorSpace"),
        (9, 10, 0, 0, 23, 16.767, "CMNewFloorSpace"),
        (9, 10, 0, 0, 24, 22.138, "CMNewFloorSpace"),
        (9, 10, 0, 0, 25, 27.061, "CMNewFloorSpace"),
        (9, 10, 0, 0, 26, 29.698, "CMNewFloorSpace"),
        (9, 10, 0, 0, 27, 33.962, "CMNewFloorSpace"),
        (9, 10, 0, 0, 28, 39.287, "CMNewFloorSpace"),
        (9, 10, 0, 0, 29, 42.210, "CMNewFloorSpace"),
        (9, 10, 0, 0, 30, 43.502, "CMNewFloorSpace"),
        (9, 10, 0, 0, 31, 43.989, "CMNewFloorSpace"),
        (9, 11, 0, 0, 20, 15.032, "CMNewFloorSpace"),
        (9, 11, 0, 0, 21, 13.908, "CMNewFloorSpace"),
        (9, 11, 0, 0, 22, 16.791, "CMNewFloorSpace"),
        (9, 11, 0, 0, 23, 18.606, "CMNewFloorSpace"),
        (9, 11, 0, 0, 24, 16.473, "CMNewFloorSpace"),
        (9, 11, 0, 0, 25, 16.060, "CMNewFloorSpace"),
        (9, 11, 0, 0, 26, 15.504, "CMNewFloorSpace"),
        (9, 11, 0, 0, 27, 16.025, "CMNewFloorSpace"),
        (9, 11, 0, 0, 28, 17.573, "CMNewFloorSpace"),
        (9, 11, 0, 0, 29, 17.935, "CMNewFloorSpace"),
        (9, 11, 0, 0, 30, 18.088, "CMNewFloorSpace"),
        (9, 11, 0, 0, 31, 18.256, "CMNewFloorSpace")],
        dtype=[('Division', 'i4'), ('BldgType', 'i4'),
               ('EndUse', 'i4'), ('Fuel', 'i4'), ('Year', 'i4'),
               ('Amount', 'f8'), ('Label', '<U50')])

    # Define a list of the microsegments converted to numeric indices
    # from the human-readable (i.e., words) category text in the
    # underlying empty JSON database that define what data should be
    # selected from the tech_data and sd_data arrays
    data_to_select = [[4, 6, 1, 1],
                      [4, 6, 1, 1],
                      [2, 8, 4, 1],
                      [9, 10, 6, 1],
                      [9, 10, 6, 1],
                      [3, 4, 5, 1]]
    # Note that the conversion from the category text to numbers isn't
    # tested here since the existing function is already tested separately

    # Define lists of strings for the cost and performance units of
    # each of the technologies in the data_to_select list; note that
    # the costs will be converted to a per square foot floor area basis
    cost_units = ['2017$/kBTU out/hr',
                  '2017$/kBTU out/hr',
                  '2017$/1000 cfm',
                  '2017$/1000 lm',
                  '2017$/1000 lm',
                  '2017$/kBTU out/hr']
    perf_units = ['BTU out/BTU in',
                  'BTU out/BTU in',
                  'cfm-hr/BTU in',
                  'lm/W',
                  'lm/W',
                  'BTU out/BTU in']

    # Define a list of numpy arrays that represent the data selected
    # from the tech_data array based on the data_to_select lists
    selected_tech_data = [
        np.array([
            (1, 1, 4, 1, 1, 0.015, 3.1, 67.78, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2003 installed base'),
            (1, 2, 4, 1, 1, 0.0, 3.25, 81.39, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2012 installed base'),
            (1, 3, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 current standard/ typical'),
            (1, 4, 4, 1, 1, 0.0, 3.35, 83.61, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 ENERGY STAR'),
            (1, 5, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 high'),
            (1, 6, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 typical'),
            (1, 7, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 high'),
            (2, 1, 4, 1, 1, 0.0173, 3.4, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2003 installed base'),
            (2, 2, 4, 1, 1, 0.0, 3.5, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2012 installed base'),
            (2, 3, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 typical'),
            (2, 4, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 mid'),
            (2, 5, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 high'),
            (2, 6, 4, 1, 1, 0.0, 3.8, 514.58, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 typical'),
            (2, 7, 4, 1, 1, 0.0, 4.2, 571.88, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 high'),
            (2, 10, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
            (2, 11, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
            (2, 12, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
            (46, 1, 4, 1, 1, 0.0809, 0.94, 16.68, 0.26, 15, 2003, 2052,
             'elec_boiler 2003 installed base'),
            (46, 2, 4, 1, 1, 0.0, 0.94, 21.13, 0.26, 15, 2012, 2052,
             'elec_boiler 2012 installed base')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (1, 1, 4, 1, 1, 0.015, 3.1, 67.78, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2003 installed base'),
            (1, 2, 4, 1, 1, 0.0, 3.25, 81.39, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2012 installed base'),
            (1, 3, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 current standard/ typical'),
            (1, 4, 4, 1, 1, 0.0, 3.35, 83.61, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 ENERGY STAR'),
            (1, 5, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 high'),
            (1, 6, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 typical'),
            (1, 7, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 high'),
            (2, 1, 4, 1, 1, 0.0173, 3.4, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2003 installed base'),
            (2, 2, 4, 1, 1, 0.0, 3.5, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2012 installed base'),
            (2, 3, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 typical'),
            (2, 4, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 mid'),
            (2, 5, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 high'),
            (2, 6, 4, 1, 1, 0.0, 3.8, 514.58, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 typical'),
            (2, 7, 4, 1, 1, 0.0, 4.2, 571.88, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 high'),
            (2, 10, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
            (2, 11, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
            (2, 12, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 high 10% ITC w MACRS'),
            (46, 1, 4, 1, 1, 0.0809, 0.94, 16.68, 0.26, 15, 2003, 2052,
             'elec_boiler 2003 installed base'),
            (46, 2, 4, 1, 1, 0.0, 0.94, 21.13, 0.26, 15, 2012, 2052,
             'elec_boiler 2012 installed base')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (31, 1, 8, 4, 1, 0.799, 0.37, 4798.93, 32.65, 20, 2003, 2003,
             'CAV_Vent 2003 installed base'),
            (31, 2, 8, 4, 1, 0.0, 0.38, 5061.56, 34.43, 20, 2004, 2052,
             'CAV_Vent 2007 installed base'),
            (31, 3, 8, 4, 1, 0.0, 0.41, 5061.56, 34.43, 20, 2011, 2052,
             'CAV_Vent 2011 minimum'),
            (31, 4, 8, 4, 1, 0.0, 0.43, 5061.56, 34.43, 20, 2011, 2052,
             'CAV_Vent 2011 typical'),
            (31, 5, 8, 4, 1, 0.0, 0.48, 5509.18, 34.43, 20, 2011, 2052,
             'CAV_Vent 2011 high'),
            (31, 10, 8, 4, 1, 0.0, 0.51, 5061.56, 34.43, 20, 2020, 2052,
             'CAV_Vent 2020 typical'),
            (31, 11, 8, 4, 1, 0.0, 0.58, 5509.18, 34.43, 20, 2020, 2052,
             'CAV_Vent 2020 high'),
            (32, 1, 8, 4, 1, 0.201, 1.15, 6266.69, 18.94, 20, 2003, 2003,
             'VAV_Vent 20003 installed base'),
            (32, 2, 8, 4, 1, 0.0, 1.26, 6266.69, 18.94, 20, 2004, 2052,
             'VAV_Vent 2007 installed base'),
            (32, 3, 8, 4, 1, 0.0, 1.28, 6266.69, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 minimum'),
            (32, 4, 8, 4, 1, 0.0, 1.34, 6266.69, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 typical'),
            (32, 5, 8, 4, 1, 0.0, 1.5, 6886.47, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 high'),
            (32, 10, 8, 4, 1, 0.0, 1.59, 6266.69, 18.94, 20, 2020, 2052,
             'VAV_Vent 2020 typical'),
            (32, 11, 8, 4, 1, 0.0, 1.82, 6886.47, 18.94, 20, 2020, 2052,
             'VAV_Vent 2020 high')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (24, 7, 10, 6, 1, 0.0, 42.4, 84.67, 0.9, 15, 2011, 2052,
             '23W CFL 2011 typical'),
            (24, 8, 10, 6, 1, 0.0, 44.6, 78.62, 0.86, 15, 2020, 2052,
             '23W CFL 2020 typical'),
            (24, 9, 10, 6, 1, 0.0, 46.8, 73.01, 0.81, 15, 2030, 2052,
             '23W CFL 2030 typical'),
            (24, 15, 10, 6, 1, 0.129, 13.5, 81.89, 8.34, 15, 2003, 2012,
             '90W Halogen PAR-38 2003 installed base'),
            (24, 16, 10, 6, 1, 0.0, 13.5, 67.01, 7.05, 15, 2007, 2012,
             '90W Halogen PAR-38 2007 installed base'),
            (24, 17, 10, 6, 1, 0.0, 13.7, 68.02, 5.49, 15, 2011, 2052,
             '90W Halogen PAR-38 2011 typical'),
            (24, 18, 10, 6, 1, 0.0, 14.3, 64.17, 5.21, 15, 2020, 2052,
             '90W Halogen PAR-38 2020 typical'),
            (24, 20, 10, 6, 1, 0.0, 16.7, 86.3, 9.1, 15, 2003, 2012,
             '70W HIR PAR-38 2003 installed base'),
            (24, 21, 10, 6, 1, 0.0, 16.7, 70.63, 7.64, 15, 2007, 2012,
             '70W HIR PAR-38 2007 installed base'),
            (24, 22, 10, 6, 1, 0.0, 18.7, 73.56, 12.04, 15, 2011, 2052,
             '70W HIR PAR-38 2011 typical'),
            (24, 23, 10, 6, 1, 0.0, 19.6, 69.32, 11.4, 15, 2020, 2052,
             '70W HIR PAR-38 2020 typical'),
            (24, 25, 10, 6, 1, 0.0, 15.1, 509.77, 27.52, 15, 2003, 2019,
             'LED Edison 2003 installed base'),
            (24, 26, 10, 6, 1, 0.0, 51.0, 296.81, 28.71, 15, 2007, 2052,
             'LED Edison 2007 installed base'),
            (24, 27, 10, 6, 1, 0.0, 60.0, 167.69, 5.69, 15, 2011, 2052,
             'LED Edison 2011 typical'),
            (24, 28, 10, 6, 1, 0.0, 170.0, 105.71, 1.04, 15, 2020, 2052,
             'LED Edison 2020 typical'),
            (24, 29, 10, 6, 1, 0.0, 202.0, 98.48, 0.72, 15, 2030, 2052,
             'LED Edison 2030 typical'),
            (25, 1, 10, 6, 1, 0.0288, 41.6, 19.77, 1.45, 15, 2003, 2005,
             'F34T12'),
            (25, 2, 10, 6, 1, 0.0864, 59.0, 31.11, 0.84, 15, 2003, 2052,
             'T8 F32 EEMag (e)'),
            (25, 9, 10, 6, 1, 0.0007, 151.1, 24.68, 1.61, 15, 2003, 2012,
             'F28T8 HE w/ OS 2011 typical'),
            (25, 10, 10, 6, 1, 0.0, 162.5, 24.08, 1.58, 15, 2020, 2029,
             'F28T8 HE w/ OS 2020 typical'),
            (25, 11, 10, 6, 1, 0.0, 165.2, 23.43, 1.54, 15, 2030, 2052,
             'F28T8 HE w/ OS 2030 typical'),
            (25, 15, 10, 6, 1, 0.0000, 178.7, 26.52, 1.40, 15, 2003, 2019,
             'F28T8 HE w/ OS & SR 2011 typical'),
            (25, 16, 10, 6, 1, 0.0000, 192.1, 25.85, 1.37, 15, 2020, 2029,
             'F28T8 HE w/ OS & SR 2020 typical'),
            (25, 17, 10, 6, 1, 0.0000, 195.3, 25.12, 1.34, 15, 2030, 2052,
             'F28T8 HE w/ OS & SR 2030 typical')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (24, 7, 10, 6, 1, 0.0, 42.4, 84.67, 0.9, 15, 2011, 2052,
             '23W CFL 2011 typical'),
            (24, 8, 10, 6, 1, 0.0, 44.6, 78.62, 0.86, 15, 2020, 2052,
             '23W CFL 2020 typical'),
            (24, 9, 10, 6, 1, 0.0, 46.8, 73.01, 0.81, 15, 2030, 2052,
             '23W CFL 2030 typical'),
            (24, 15, 10, 6, 1, 0.129, 13.5, 81.89, 8.34, 15, 2003, 2012,
             '90W Halogen PAR-38 2003 installed base'),
            (24, 16, 10, 6, 1, 0.0, 13.5, 67.01, 7.05, 15, 2007, 2012,
             '90W Halogen PAR-38 2007 installed base'),
            (24, 17, 10, 6, 1, 0.0, 13.7, 68.02, 5.49, 15, 2011, 2052,
             '90W Halogen PAR-38 2011 typical'),
            (24, 18, 10, 6, 1, 0.0, 14.3, 64.17, 5.21, 15, 2020, 2052,
             '90W Halogen PAR-38 2020 typical'),
            (24, 20, 10, 6, 1, 0.0, 16.7, 86.3, 9.1, 15, 2003, 2012,
             '70W HIR PAR-38 2003 installed base'),
            (24, 21, 10, 6, 1, 0.0, 16.7, 70.63, 7.64, 15, 2007, 2012,
             '70W HIR PAR-38 2007 installed base'),
            (24, 22, 10, 6, 1, 0.0, 18.7, 73.56, 12.04, 15, 2011, 2052,
             '70W HIR PAR-38 2011 typical'),
            (24, 23, 10, 6, 1, 0.0, 19.6, 69.32, 11.4, 15, 2020, 2052,
             '70W HIR PAR-38 2020 typical'),
            (24, 25, 10, 6, 1, 0.0, 15.1, 509.77, 27.52, 15, 2003, 2019,
             'LED Edison 2003 installed base'),
            (24, 26, 10, 6, 1, 0.0, 51.0, 296.81, 28.71, 15, 2007, 2052,
             'LED Edison 2007 installed base'),
            (24, 27, 10, 6, 1, 0.0, 60.0, 167.69, 5.69, 15, 2011, 2052,
             'LED Edison 2011 typical'),
            (24, 28, 10, 6, 1, 0.0, 170.0, 105.71, 1.04, 15, 2020, 2052,
             'LED Edison 2020 typical'),
            (24, 29, 10, 6, 1, 0.0, 202.0, 98.48, 0.72, 15, 2030, 2052,
             'LED Edison 2030 typical'),
            (25, 1, 10, 6, 1, 0.0288, 41.6, 19.77, 1.45, 15, 2003, 2005,
             'F34T12'),
            (25, 2, 10, 6, 1, 0.0864, 59.0, 31.11, 0.84, 15, 2003, 2052,
             'T8 F32 EEMag (e)'),
            (25, 9, 10, 6, 1, 0.0007, 151.1, 24.68, 1.61, 15, 2003, 2012,
             'F28T8 HE w/ OS 2011 typical'),
            (25, 10, 10, 6, 1, 0.0, 162.5, 24.08, 1.58, 15, 2020, 2029,
             'F28T8 HE w/ OS 2020 typical'),
            (25, 11, 10, 6, 1, 0.0, 165.2, 23.43, 1.54, 15, 2030, 2052,
             'F28T8 HE w/ OS 2030 typical'),
            (25, 15, 10, 6, 1, 0.0000, 178.7, 26.52, 1.40, 15, 2003, 2019,
             'F28T8 HE w/ OS & SR 2011 typical'),
            (25, 16, 10, 6, 1, 0.0000, 192.1, 25.85, 1.37, 15, 2020, 2029,
             'F28T8 HE w/ OS & SR 2020 typical'),
            (25, 17, 10, 6, 1, 0.0000, 195.3, 25.12, 1.34, 15, 2030, 2052,
             'F28T8 HE w/ OS & SR 2030 typical')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (34, 1, 3, 5, 1, 0.4901, 0.70, 52.56, 0.43, 10, 1995, 2052,
             'Range, Electric, 4 burner, oven, 11-inch griddle'),
            (34, 2, 3, 5, 1, 0.0000, 0.80, 61.46, 0.43, 10, 2000, 2052,
             'Range, Electric-induction, 4 burner, oven, 11-inch griddle')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')])]

    # Define a list of numpy arrays that represent the data selected
    # from the sd_data array based on the data_to_select lists
    selected_sd_data = [
        np.array(
            [[0.239, 0.226, 0.214, 0.202, 0.190, 0.180,
              0.169, 0.160, 0.151, 0.142, 0.134, 0.127],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.023, 0.031, 0.040, 0.046, 0.054, 0.059,
              0.064, 0.069, 0.066, 0.062, 0.059, 0.055],
             [0.039, 0.037, 0.035, 0.033, 0.031, 0.029,
              0.028, 0.026, 0.033, 0.039, 0.045, 0.043],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.008],
             [1.648, 1.680, 1.707, 1.722, 1.748, 1.773,
              1.799, 1.824, 1.849, 1.879, 1.904, 1.929],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000]]),
        np.array(
            [[0.239, 0.226, 0.214, 0.202, 0.190, 0.180,
              0.169, 0.160, 0.151, 0.142, 0.134, 0.127],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.023, 0.031, 0.040, 0.046, 0.054, 0.059,
              0.064, 0.069, 0.066, 0.062, 0.059, 0.055],
             [0.039, 0.037, 0.035, 0.033, 0.031, 0.029,
              0.028, 0.026, 0.033, 0.039, 0.045, 0.043],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.008],
             [1.648, 1.680, 1.707, 1.722, 1.748, 1.773,
              1.799, 1.824, 1.849, 1.879, 1.904, 1.929],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000]]),
        np.array(
            [[0.717, 0.673, 0.631, 0.591, 0.554, 0.520,
              0.487, 0.457, 0.428, 0.402, 0.377, 0.353],
             [0.355, 0.395, 0.370, 0.347, 0.325, 0.305,
              0.286, 0.268, 0.251, 0.236, 0.221, 0.207],
             [0.000, 0.000, 0.001, 0.002, 0.003, 0.005,
              0.004, 0.004, 0.004, 0.004, 0.004, 0.003],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.060, 0.115, 0.167, 0.225,
              0.281, 0.336, 0.391, 0.442, 0.493, 0.462],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.079],
             [0.180, 0.169, 0.159, 0.149, 0.139, 0.131,
              0.123, 0.115, 0.108, 0.101, 0.095, 0.089],
             [0.099, 0.113, 0.106, 0.099, 0.093, 0.087,
              0.082, 0.077, 0.072, 0.068, 0.063, 0.059],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.021, 0.041, 0.059, 0.071,
              0.082, 0.093, 0.102, 0.112, 0.121, 0.113],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.016]]),
        np.array(
            [[0.000, 0.000, 0.021, 0.041, 0.058, 0.069,
              0.081, 0.092, 0.104, 0.115, 0.125, 0.116],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.034],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.199, 0.173, 0.150, 0.131, 0.102, 0.091,
              0.080, 0.071, 0.063, 0.056, 0.050, 0.040],
             [0.113, 0.130, 0.102, 0.080, 0.063, 0.056,
              0.049, 0.044, 0.039, 0.034, 0.030, 0.025],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.408, 0.357, 0.309, 0.268, 0.233, 0.206,
              0.183, 0.162, 0.144, 0.127, 0.113, 0.100],
             [0.506, 0.634, 0.745, 0.908, 1.220, 1.487,
              1.741, 1.989, 2.234, 2.473, 2.702, 2.494],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.107],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [1.427, 1.558, 1.671, 1.799, 1.661, 1.534,
              1.416, 1.307, 1.207, 1.114, 1.028, 0.949],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.284],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.048, 0.030, 0.018, 0.011, 0.007, 0.004,
              0.003, 0.002, 0.001, 0.001, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.089],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.075, 0.066, 0.057, 0.049, 0.043, 0.038,
              0.034, 0.030, 0.026, 0.024, 0.021, 0.019]]),
        np.array(
            [[0.000, 0.000, 0.021, 0.041, 0.058, 0.069,
              0.081, 0.092, 0.104, 0.115, 0.125, 0.116],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.034],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.199, 0.173, 0.150, 0.131, 0.102, 0.091,
              0.080, 0.071, 0.063, 0.056, 0.050, 0.040],
             [0.113, 0.130, 0.102, 0.080, 0.063, 0.056,
              0.049, 0.044, 0.039, 0.034, 0.030, 0.025],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.408, 0.357, 0.309, 0.268, 0.233, 0.206,
              0.183, 0.162, 0.144, 0.127, 0.113, 0.100],
             [0.506, 0.634, 0.745, 0.908, 1.220, 1.487,
              1.741, 1.989, 2.234, 2.473, 2.702, 2.494],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.107],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [1.427, 1.558, 1.671, 1.799, 1.661, 1.534,
              1.416, 1.307, 1.207, 1.114, 1.028, 0.949],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.284],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.048, 0.030, 0.018, 0.011, 0.007, 0.004,
              0.003, 0.002, 0.001, 0.001, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.089],
             [0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
              0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
             [0.075, 0.066, 0.057, 0.049, 0.043, 0.038,
              0.034, 0.030, 0.026, 0.024, 0.021, 0.019]]),
        np.array(
            [[1.261, 1.21, 1.163, 1.122, 1.085, 1.054,
              1.026, 1.001, 0.98, 0.962, 0.945, 0.931],
             [0.421, 0.46, 0.495, 0.526, 0.553, 0.577,
              0.599, 0.62, 0.639, 0.655, 0.67, 0.682]])]

    # Define a list of lists that represent the names of the
    # technology and performance levels extracted from the sd_data
    # array and corresponding to the rows of the numpy arrays in
    # selected_sd_data, the other anticipated output from the same function
    selected_sd_names = [
        ['comm_GSHP-heat 2003 installed base',
         'comm_GSHP-heat 2012 installed base', 'comm_GSHP-heat 2013 high',
         'comm_GSHP-heat 2013 high 10% ITC w MACRS', 'comm_GSHP-heat 2013 mid',
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS',
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS',
         'comm_GSHP-heat 2013 typical', 'comm_GSHP-heat 2020 high',
         'comm_GSHP-heat 2020 typical', 'elec_boiler 2003 installed base',
         'elec_boiler 2012 installed base',
         'rooftop_ASHP-heat 2003 installed base',
         'rooftop_ASHP-heat 2012 installed base',
         'rooftop_ASHP-heat 2013 ENERGY STAR',
         'rooftop_ASHP-heat 2013 current standard/ typ',
         'rooftop_ASHP-heat 2013 high', 'rooftop_ASHP-heat 2020 high',
         'rooftop_ASHP-heat 2020 typical'],
        ['comm_GSHP-heat 2003 installed base',
         'comm_GSHP-heat 2012 installed base', 'comm_GSHP-heat 2013 high',
         'comm_GSHP-heat 2013 high 10% ITC w MACRS', 'comm_GSHP-heat 2013 mid',
         'comm_GSHP-heat 2013 mid 10% ITC w MACRS',
         'comm_GSHP-heat 2013 typ 10% ITC w MACRS',
         'comm_GSHP-heat 2013 typical', 'comm_GSHP-heat 2020 high',
         'comm_GSHP-heat 2020 typical', 'elec_boiler 2003 installed base',
         'elec_boiler 2012 installed base',
         'rooftop_ASHP-heat 2003 installed base',
         'rooftop_ASHP-heat 2012 installed base',
         'rooftop_ASHP-heat 2013 ENERGY STAR',
         'rooftop_ASHP-heat 2013 current standard/ typ',
         'rooftop_ASHP-heat 2013 high', 'rooftop_ASHP-heat 2020 high',
         'rooftop_ASHP-heat 2020 typical'],
        ['CAV_Vent 2003 installed base', 'CAV_Vent 2007 installed base',
         'CAV_Vent 2011 high', 'CAV_Vent 2011 minimum',
         'CAV_Vent 2011 typical', 'CAV_Vent 2020 high',
         'CAV_Vent 2020 typical', 'VAV_Vent 20003 installed base',
         'VAV_Vent 2007 installed base', 'VAV_Vent 2011 high',
         'VAV_Vent 2011 minimum', 'VAV_Vent 2011 typical',
         'VAV_Vent 2020 high', 'VAV_Vent 2020 typical'],
        ['23W CFL 2011 typical', '23W CFL 2020 typical',
         '23W CFL 2030 typical', '70W HIR PAR-38 2003 installed base',
         '70W HIR PAR-38 2007 installed base', '70W HIR PAR-38 2011 typical',
         '70W HIR PAR-38 2020 typical',
         '90W Halogen PAR-38 2003 installed base',
         '90W Halogen PAR-38 2007 installed base',
         '90W Halogen PAR-38 2011 typical', '90W Halogen PAR-38 2020 typical',
         'F28T8 HE 2011 typical', 'F28T8 HE w/ OS & SR 2011 typical',
         'F28T8 HE w/ OS & SR 2020 typical',
         'F28T8 HE w/ OS & SR 2030 typical', 'F28T8 HE w/ OS 2011 typical',
         'F28T8 HE w/ OS 2020 typical', 'F28T8 HE w/ OS 2030 typical',
         'F34T12', 'LED Edison 2003 installed base',
         'LED Edison 2007 installed base', 'LED Edison 2011 typical',
         'LED Edison 2020 typical', 'LED Edison 2030 typical',
         'T8 F32 EEMag (e)'],
        ['23W CFL 2011 typical', '23W CFL 2020 typical',
         '23W CFL 2030 typical', '70W HIR PAR-38 2003 installed base',
         '70W HIR PAR-38 2007 installed base', '70W HIR PAR-38 2011 typical',
         '70W HIR PAR-38 2020 typical',
         '90W Halogen PAR-38 2003 installed base',
         '90W Halogen PAR-38 2007 installed base',
         '90W Halogen PAR-38 2011 typical', '90W Halogen PAR-38 2020 typical',
         'F28T8 HE 2011 typical', 'F28T8 HE w/ OS & SR 2011 typical',
         'F28T8 HE w/ OS & SR 2020 typical',
         'F28T8 HE w/ OS & SR 2030 typical', 'F28T8 HE w/ OS 2011 typical',
         'F28T8 HE w/ OS 2020 typical', 'F28T8 HE w/ OS 2030 typical',
         'F34T12', 'LED Edison 2003 installed base',
         'LED Edison 2007 installed base', 'LED Edison 2011 typical',
         'LED Edison 2020 typical', 'LED Edison 2030 typical',
         'T8 F32 EEMag (e)'],
        ['Range, Electric, 4 burner, oven, 11-inch gr',
         'Range, Electric-induction, 4 burner, oven, 1']]

    # Define a list of years for which the data should be output
    tmp_yrs = list(range(2009, 2021))  # 2009 - 2020

    # Define a list of names of specific technologies to have their
    # cost, performance, and lifetime data converted into the desired
    # form for the output JSON database (these strings should be as
    # they appear in the tech data, not the truncated technology name
    # strings that appear in the service demand data)
    tmp_names = ['comm_GSHP-heat', 'rooftop_ASHP-heat',
                 'VAV_Vent', 'F28T8 HE w/ OS', 'F34T12',
                 'Range, Electric, 4 burner, oven, 11-inch griddle']

    # Set up a list of numpy arrays containing the cost, performance,
    # and lifetime data for the specific technologies in tmp_names
    reduced_tech_data = [
        np.array([
            (2, 1, 4, 1, 1, 0.0173, 3.4, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2003 installed base'),
            (2, 2, 4, 1, 1, 0.0, 3.5, 545.83, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2012 installed base'),
            (2, 3, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 typical'),
            (2, 4, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 mid'),
            (2, 5, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2003, 2052,
             'comm_GSHP-heat 2013 high'),
            (2, 6, 4, 1, 1, 0.0, 3.8, 514.58, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 typical'),
            (2, 7, 4, 1, 1, 0.0, 4.2, 571.88, 3.13, 25, 2020, 2052,
             'comm_GSHP-heat 2020 high'),
            (2, 10, 4, 1, 1, 0.0, 3.6, 514.58, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 typ 10% ITC w MACRS'),
            (2, 11, 4, 1, 1, 0.0, 3.7, 530.21, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 mid 10% ITC w MACRS'),
            (2, 12, 4, 1, 1, 0.0, 4.0, 571.88, 3.13, 25, 2008, 2016,
             'comm_GSHP-heat 2013 high 10% ITC w MACRS')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (1, 1, 4, 1, 1, 0.015, 3.1, 67.78, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2003 installed base'),
            (1, 2, 4, 1, 1, 0.0, 3.25, 81.39, 1.47, 15, 2003, 2009,
             'rooftop_ASHP-heat 2012 installed base'),
            (1, 3, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 current standard/ typical'),
            (1, 4, 4, 1, 1, 0.0, 3.35, 83.61, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 ENERGY STAR'),
            (1, 5, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2003, 2052,
             'rooftop_ASHP-heat 2013 high'),
            (1, 6, 4, 1, 1, 0.0, 3.3, 81.39, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 typical'),
            (1, 7, 4, 1, 1, 0.0, 3.4, 102.78, 1.47, 15, 2020, 2052,
             'rooftop_ASHP-heat 2020 high')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (32, 1, 8, 4, 1, 0.201, 1.15, 6266.69, 18.94, 20, 2003, 2003,
             'VAV_Vent 20003 installed base'),
            (32, 2, 8, 4, 1, 0.0, 1.26, 6266.69, 18.94, 20, 2004, 2052,
             'VAV_Vent 2007 installed base'),
            (32, 3, 8, 4, 1, 0.0, 1.28, 6266.69, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 minimum'),
            (32, 4, 8, 4, 1, 0.0, 1.34, 6266.69, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 typical'),
            (32, 5, 8, 4, 1, 0.0, 1.5, 6886.47, 18.94, 20, 2011, 2052,
             'VAV_Vent 2011 high'),
            (32, 10, 8, 4, 1, 0.0, 1.59, 6266.69, 18.94, 20, 2020, 2052,
             'VAV_Vent 2020 typical'),
            (32, 11, 8, 4, 1, 0.0, 1.82, 6886.47, 18.94, 20, 2020, 2052,
             'VAV_Vent 2020 high')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (25, 9, 10, 6, 1, 0.0007, 151.1, 24.68, 1.61, 15, 2003, 2012,
             'F28T8 HE w/ OS 2011 typical'),
            (25, 10, 10, 6, 1, 0.0, 162.5, 24.08, 1.58, 15, 2020, 2029,
             'F28T8 HE w/ OS 2020 typical'),
            (25, 11, 10, 6, 1, 0.0, 165.2, 23.43, 1.54, 15, 2030, 2052,
             'F28T8 HE w/ OS 2030 typical')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (25, 1, 10, 6, 1, 0.0288, 41.6, 19.77, 1.45, 15, 2003, 2005,
             'F34T12')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')]),
        np.array([
            (34, 1, 3, 5, 1, 0.4901, 0.70, 52.56, 0.43, 10, 1995, 2052,
             'Range, Electric, 4 burner, oven, 11-inch griddle')],
            dtype=[('t', 'i4'), ('v', 'i4'), ('r', 'i4'), ('s', 'i4'),
                   ('f', 'i4'), ('Shr', 'f8'), ('eff', 'f8'), ('c1', 'f8'),
                   ('c2', 'f8'), ('life', 'i4'), ('y1', 'i4'), ('y2', 'i4'),
                   ('technology name', '<U50')])]

    # Set up a list of cost conversion factors reported in numpy arrays
    # with entries for each year in the range of years tested, including
    # the adjustment for end uses that have service demand reported as
    # TBTU and thus need to be reduced by 1e3 to yield $/ft^2 floor
    # when multiplied by the reported cost data in $/kBTU
    cost_factors = [
        [np.array([0.02, 0.02, 0.02, 0.02, 0.02, 0.02,
                   0.02, 0.02, 0.02, 0.02, 0.02, 0.02]),
         np.array([0.036, 0.036, 0.036, 0.036, 0.036, 0.036,
                   0.036, 0.036, 0.036, 0.036, 0.036, 0.036])],
        [np.array([0.02, 0.02, 0.02, 0.02, 0.02, 0.02,
                   0.02, 0.02, 0.02, 0.02, 0.02, 0.02]),
         np.array([0.036, 0.036, 0.036, 0.036, 0.036, 0.036,
                   0.036, 0.036, 0.036, 0.036, 0.036, 0.036])],
        np.array([0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                  0.001, 0.001, 0.001, 0.001, 0.001, 0.001]),
        np.array([0.049, 0.049, 0.049, 0.049, 0.049, 0.049,
                  0.049, 0.049, 0.049, 0.049, 0.049, 0.049]),
        np.array([0.049, 0.049, 0.049, 0.049, 0.049, 0.049,
                  0.049, 0.049, 0.049, 0.049, 0.049, 0.049]),
        np.array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])]

    # Define a list of the dicts of capital cost data to be generated
    # for output to a JSON database
    result_cost = [
        {'typical':
            {'2009': 539.393, '2010': 538.602, '2011': 537.720,
             '2012': 537.044, '2013': 536.171, '2014': 535.569,
             '2015': 534.815, '2016': 534.188, '2017': 533.455,
             '2018': 532.841, '2019': 532.175, '2020': 531.613},
         'best':
            {'2009': 571.88, '2010': 571.88, '2011': 571.88,
             '2012': 571.88, '2013': 571.88, '2014': 571.88,
             '2015': 571.88, '2016': 571.88, '2017': 571.88,
             '2018': 571.88, '2019': 571.88, '2020': 571.88}},
        {'typical':
            {'2009': 0.0, '2010': 0.0, '2011': 0.0,
             '2012': 0.0, '2013': 0.0, '2014': 0.0,
             '2015': 0.0, '2016': 0.0, '2017': 0.0,
             '2018': 0.0, '2019': 0.0, '2020': 0.0},
         'best':
            {'2009': 102.78, '2010': 102.78, '2011': 102.78,
             '2012': 102.78, '2013': 102.78, '2014': 102.78,
             '2015': 102.78, '2016': 102.78, '2017': 102.78,
             '2018': 102.78, '2019': 102.78, '2020': 102.78}},
        {'typical':
            {'2009': 6266.69, '2010': 6266.69, '2011': 6266.69,
             '2012': 6266.69, '2013': 6266.69, '2014': 6266.69,
             '2015': 6266.69, '2016': 6266.69, '2017': 6266.69,
             '2018': 6266.69, '2019': 6266.69, '2020': 6266.69},
         'best':
            {'2009': 6266.69, '2010': 6266.69, '2011': 6886.47,
             '2012': 6886.47, '2013': 6886.47, '2014': 6886.47,
             '2015': 6886.47, '2016': 6886.47, '2017': 6886.47,
             '2018': 6886.47, '2019': 6886.47, '2020': 6886.47}},
        {'typical':
            {'2009': 24.68, '2010': 24.68, '2011': 24.68,
             '2012': 24.68, '2013': 24.68, '2014': 24.68,
             '2015': 24.68, '2016': 24.68, '2017': 24.68,
             '2018': 24.68, '2019': 24.68, '2020': 24.542},
         'best':
            {'2009': 24.68, '2010': 24.68, '2011': 24.68,
             '2012': 24.68, '2013': 24.68, '2014': 24.68,
             '2015': 24.68, '2016': 24.68, '2017': 24.68,
             '2018': 24.68, '2019': 24.68, '2020': 24.542}},
        {'typical':
            {'2009': 0.0, '2010': 0.0, '2011': 0.0,
             '2012': 0.0, '2013': 0.0, '2014': 0.0,
             '2015': 0.0, '2016': 0.0, '2017': 0.0,
             '2018': 0.0, '2019': 0.0, '2020': 0.0},
         'best':
            {'2009': 0.0, '2010': 0.0, '2011': 0.0,
             '2012': 0.0, '2013': 0.0, '2014': 0.0,
             '2015': 0.0, '2016': 0.0, '2017': 0.0,
             '2018': 0.0, '2019': 0.0, '2020': 0.0}},
        {'typical':
            {'2009': 52.56, '2010': 52.56, '2011': 52.56,
             '2012': 52.56, '2013': 52.56, '2014': 52.56,
             '2015': 52.56, '2016': 52.56, '2017': 52.56,
             '2018': 52.56, '2019': 52.56, '2020': 52.56},
         'best':
            {'2009': 52.56, '2010': 52.56, '2011': 52.56,
             '2012': 52.56, '2013': 52.56, '2014': 52.56,
             '2015': 52.56, '2016': 52.56, '2017': 52.56,
             '2018': 52.56, '2019': 52.56, '2020': 52.56}}]

    # Define a list of the dicts of performance levels for each
    # technology in the desired form to be output to a JSON database
    result_perf = [
        {'typical':
            {'2009': 3.4411, '2010': 3.4462, '2011': 3.4519,
             '2012': 3.4562, '2013': 3.4618, '2014': 3.4656,
             '2015': 3.4704, '2016': 3.4745, '2017': 3.4792,
             '2018': 3.4831, '2019': 3.4873, '2020': 3.4978},
         'best':
            {'2009': 4.0, '2010': 4.0, '2011': 4.0,
             '2012': 4.0, '2013': 4.0, '2014': 4.0,
             '2015': 4.0, '2016': 4.0, '2017': 4.0,
             '2018': 4.0, '2019': 4.0, '2020': 4.2}},
        {'typical':
            {'2009': 0.0, '2010': 0.0, '2011': 0.0,
             '2012': 0.0, '2013': 0.0, '2014': 0.0,
             '2015': 0.0, '2016': 0.0, '2017': 0.0,
             '2018': 0.0, '2019': 0.0, '2020': 0.0},
         'best':
            {'2009': 3.4, '2010': 3.4, '2011': 3.4,
             '2012': 3.4, '2013': 3.4, '2014': 3.4,
             '2015': 3.4, '2016': 3.4, '2017': 3.4,
             '2018': 3.4, '2019': 3.4, '2020': 3.4}},
        {'typical':
            {'2009': 1.26, '2010': 1.26, '2011': 1.2732,
             '2012': 1.2834, '2013': 1.2911, '2014': 1.2959,
             '2015': 1.3, '2016': 1.3038, '2017': 1.3060,
             '2018': 1.3098, '2019': 1.3126, '2020': 1.3362},
         'best':
            {'2009': 1.26, '2010': 1.26, '2011': 1.5,
             '2012': 1.5, '2013': 1.5, '2014': 1.5,
             '2015': 1.5, '2016': 1.5, '2017': 1.5,
             '2018': 1.5, '2019': 1.5, '2020': 1.82}},
        {'typical':
            {'2009': 151.1, '2010': 151.1, '2011': 151.1,
             '2012': 151.1, '2013': 151.1, '2014': 151.1,
             '2015': 151.1, '2016': 151.1, '2017': 151.1,
             '2018': 151.1, '2019': 151.1, '2020': 153.726},
         'best':
            {'2009': 151.1, '2010': 151.1, '2011': 151.1,
             '2012': 151.1, '2013': 151.1, '2014': 151.1,
             '2015': 151.1, '2016': 151.1, '2017': 151.1,
             '2018': 151.1, '2019': 151.1, '2020': 162.5}},
        {'typical':
            {'2009': 0.0, '2010': 0.0, '2011': 0.0,
             '2012': 0.0, '2013': 0.0, '2014': 0.0,
             '2015': 0.0, '2016': 0.0, '2017': 0.0,
             '2018': 0.0, '2019': 0.0, '2020': 0.0},
         'best':
            {'2009': 0.0, '2010': 0.0, '2011': 0.0,
             '2012': 0.0, '2013': 0.0, '2014': 0.0,
             '2015': 0.0, '2016': 0.0, '2017': 0.0,
             '2018': 0.0, '2019': 0.0, '2020': 0.0}},
        {'typical':
            {'2009': 0.7, '2010': 0.7, '2011': 0.7,
             '2012': 0.7, '2013': 0.7, '2014': 0.7,
             '2015': 0.7, '2016': 0.7, '2017': 0.7,
             '2018': 0.7, '2019': 0.7, '2020': 0.7},
         'best':
            {'2009': 0.7, '2010': 0.7, '2011': 0.7,
             '2012': 0.7, '2013': 0.7, '2014': 0.7,
             '2015': 0.7, '2016': 0.7, '2017': 0.7,
             '2018': 0.7, '2019': 0.7, '2020': 0.7}}]

    # Define a list of dicts with the mean and range of equipment
    # lifetimes (in years) for each of the technologies tested
    result_life = [
        {'average':
            {'2009': 25, '2010': 25, '2011': 25,
             '2012': 25, '2013': 25, '2014': 25,
             '2015': 25, '2016': 25, '2017': 25,
             '2018': 25, '2019': 25, '2020': 25},
         'range':
            {'2009': 0, '2010': 0, '2011': 0,
             '2012': 0, '2013': 0, '2014': 0,
             '2015': 0, '2016': 0, '2017': 0,
             '2018': 0, '2019': 0, '2020': 0}},
        {'average':
            {'2009': 15, '2010': 15, '2011': 15,
             '2012': 15, '2013': 15, '2014': 15,
             '2015': 15, '2016': 15, '2017': 15,
             '2018': 15, '2019': 15, '2020': 15},
         'range':
            {'2009': 0, '2010': 0, '2011': 0,
             '2012': 0, '2013': 0, '2014': 0,
             '2015': 0, '2016': 0, '2017': 0,
             '2018': 0, '2019': 0, '2020': 0}},
        {'average':
            {'2009': 20, '2010': 20, '2011': 20,
             '2012': 20, '2013': 20, '2014': 20,
             '2015': 20, '2016': 20, '2017': 20,
             '2018': 20, '2019': 20, '2020': 20},
         'range':
            {'2009': 0, '2010': 0, '2011': 0,
             '2012': 0, '2013': 0, '2014': 0,
             '2015': 0, '2016': 0, '2017': 0,
             '2018': 0, '2019': 0, '2020': 0}},
        {'average':
            {'2009': 15, '2010': 15, '2011': 15,
             '2012': 15, '2013': 15, '2014': 15,
             '2015': 15, '2016': 15, '2017': 15,
             '2018': 15, '2019': 15, '2020': 15},
         'range':
            {'2009': 0, '2010': 0, '2011': 0,
             '2012': 0, '2013': 0, '2014': 0,
             '2015': 0, '2016': 0, '2017': 0,
             '2018': 0, '2019': 0, '2020': 0}},
        {'average':
            {'2009': 0, '2010': 0, '2011': 0,
             '2012': 0, '2013': 0, '2014': 0,
             '2015': 0, '2016': 0, '2017': 0,
             '2018': 0, '2019': 0, '2020': 0},
         'range':
            {'2009': 0, '2010': 0, '2011': 0,
             '2012': 0, '2013': 0, '2014': 0,
             '2015': 0, '2016': 0, '2017': 0,
             '2018': 0, '2019': 0, '2020': 0}},
        {'average':
            {'2009': 10, '2010': 10, '2011': 10,
             '2012': 10, '2013': 10, '2014': 10,
             '2015': 10, '2016': 10, '2017': 10,
             '2018': 10, '2019': 10, '2020': 10},
         'range':
            {'2009': 0, '2010': 0, '2011': 0,
             '2012': 0, '2013': 0, '2014': 0,
             '2015': 0, '2016': 0, '2017': 0,
             '2018': 0, '2019': 0, '2020': 0}}]

    # A list of nested dicts corresponding to the time preference
    # premium data for each microsegment specified in data_to_select
    result_prem = [
        {'time preference': {
            '2009': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2010': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2011': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2012': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2013': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2014': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2015': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2016': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2017': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2018': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2019': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2020': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0]},
         'population fraction': {
            '2009': [0.267, 0.226, 0.197, 0.189, 0.105, 0.013, 0.003],
            '2010': [0.265, 0.226, 0.186, 0.184, 0.115, 0.019, 0.005],
            '2011': [0.265, 0.226, 0.183, 0.183, 0.113, 0.02, 0.01],
            '2012': [0.265, 0.226, 0.182, 0.179, 0.108, 0.037, 0.003],
            '2013': [0.265, 0.226, 0.182, 0.179, 0.108, 0.037, 0.003],
            '2014': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2015': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2016': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2017': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2018': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2019': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2020': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003]}},
        {'time preference': {
            '2009': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2010': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2011': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2012': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2013': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2014': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2015': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2016': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2017': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2018': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2019': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2020': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0]},
         'population fraction': {
            '2009': [0.267, 0.226, 0.197, 0.189, 0.105, 0.013, 0.003],
            '2010': [0.265, 0.226, 0.186, 0.184, 0.115, 0.019, 0.005],
            '2011': [0.265, 0.226, 0.183, 0.183, 0.113, 0.02, 0.01],
            '2012': [0.265, 0.226, 0.182, 0.179, 0.108, 0.037, 0.003],
            '2013': [0.265, 0.226, 0.182, 0.179, 0.108, 0.037, 0.003],
            '2014': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2015': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2016': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2017': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2018': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2019': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2020': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003]}},
        {'time preference': {
            '2009': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2010': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2011': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2012': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2013': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2014': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2015': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2016': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2017': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2018': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2019': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2020': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0]},
         'population fraction': {
            '2009': [0.267, 0.226, 0.197, 0.189, 0.105, 0.013, 0.003],
            '2010': [0.265, 0.226, 0.186, 0.184, 0.115, 0.019, 0.005],
            '2011': [0.265, 0.226, 0.183, 0.183, 0.113, 0.02, 0.01],
            '2012': [0.265, 0.226, 0.181, 0.179, 0.11, 0.036, 0.003],
            '2013': [0.265, 0.226, 0.181, 0.179, 0.11, 0.036, 0.003],
            '2014': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2015': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2016': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2017': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2018': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2019': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
            '2020': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003]}},
        {'time preference': {
            '2009': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2010': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2011': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2012': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2013': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2014': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2015': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2016': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2017': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2018': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2019': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2020': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0]},
         'population fraction': {
            '2009': [0.266, 0.224, 0.195, 0.192, 0.085, 0.012, 0.026],
            '2010': [0.264, 0.225, 0.18, 0.185, 0.092, 0.022, 0.032],
            '2011': [0.264, 0.225, 0.177, 0.184, 0.09, 0.026, 0.034],
            '2012': [0.264, 0.225, 0.177, 0.183, 0.091, 0.026, 0.034],
            '2013': [0.264, 0.225, 0.177, 0.183, 0.091, 0.026, 0.034],
            '2014': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2015': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2016': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2017': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2018': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2019': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2020': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027]}},
        {'time preference': {
            '2009': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2010': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2011': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2012': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2013': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2014': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2015': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2016': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2017': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2018': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2019': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2020': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0]},
         'population fraction': {
            '2009': [0.266, 0.224, 0.195, 0.192, 0.085, 0.012, 0.026],
            '2010': [0.264, 0.225, 0.18, 0.185, 0.092, 0.022, 0.032],
            '2011': [0.264, 0.225, 0.177, 0.184, 0.09, 0.026, 0.034],
            '2012': [0.264, 0.225, 0.177, 0.183, 0.091, 0.026, 0.034],
            '2013': [0.264, 0.225, 0.177, 0.183, 0.091, 0.026, 0.034],
            '2014': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2015': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2016': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2017': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2018': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2019': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
            '2020': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027]}},
        {'time preference': {
            '2009': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2010': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2011': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2012': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2013': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2014': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2015': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2016': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2017': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2018': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2019': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
            '2020': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0]},
         'population fraction': {
            '2009': [0.265, 0.247, 0.216, 0.169, 0.096, 0.004, 0.003],
            '2010': [0.261, 0.248, 0.218, 0.165, 0.09, 0.003, 0.015],
            '2011': [0.261, 0.248, 0.214, 0.158, 0.086, 0.003, 0.03],
            '2012': [0.261, 0.248, 0.215, 0.162, 0.087, 0.019, 0.008],
            '2013': [0.261, 0.248, 0.215, 0.162, 0.087, 0.019, 0.008],
            '2014': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
            '2015': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
            '2016': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
            '2017': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
            '2018': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
            '2019': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
            '2020': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004]}}]

    # Define lists of technology names for each of the microsegments tested
    tech_names = [
        ['comm_GSHP-heat', 'elec_boiler', 'rooftop_ASHP-heat'],
        ['comm_GSHP-heat', 'elec_boiler', 'rooftop_ASHP-heat'],
        ['CAV_Vent', 'VAV_Vent'],
        ['23W CFL', '70W HIR PAR-38', '90W Halogen PAR-38',
         'F28T8 HE w/ OS', 'F28T8 HE w/ OS & SR', 'F34T12',
         'LED Edison', 'T8 F32 EEMag (e)'],
        ['23W CFL', '70W HIR PAR-38', '90W Halogen PAR-38',
         'F28T8 HE w/ OS & SR', 'F28T8 HE w/ OS', 'F34T12',
         'LED Edison', 'T8 F32 EEMag (e)'],
        ['Range, Electric, 4 burner, oven, 11-inch griddle',
         'Range, Electric-induction, 4 burner, oven, 11-inch']]

    # Define a list with a multi-level dict of fully formmatted,
    # technology-specific data for each of the unique microsegments
    # in the data_to_select list
    tech_master_dict = [
        {'consumer choice':
            {'time preference': {
                '2009': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2010': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2011': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2012': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2013': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2014': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2015': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2016': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2017': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2018': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2019': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2020': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0]},
             'population fraction': {
                '2009': [0.267, 0.226, 0.197, 0.189, 0.105, 0.013, 0.003],
                '2010': [0.265, 0.226, 0.186, 0.184, 0.115, 0.019, 0.005],
                '2011': [0.265, 0.226, 0.183, 0.183, 0.113, 0.02, 0.01],
                '2012': [0.265, 0.226, 0.182, 0.179, 0.108, 0.037, 0.003],
                '2013': [0.265, 0.226, 0.182, 0.179, 0.108, 0.037, 0.003],
                '2014': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2015': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2016': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2017': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2018': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2019': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2020': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003]}},
         'comm_GSHP-heat':
            {'installed cost':
                {'typical':
                    {'2009': 531.6133, '2010': 532.1745,
                     '2011': 532.8413, '2012': 533.455,
                     '2013': 534.1878, '2014': 534.8147,
                     '2015': 535.5688, '2016': 536.1709,
                     '2017': 537.0444, '2018': 537.7201,
                     '2019': 538.6021, '2020': 539.3931},
                 'best':
                    {'2009': 571.88, '2010': 571.88,
                     '2011': 571.88, '2012': 571.88,
                     '2013': 571.88, '2014': 571.88,
                     '2015': 571.88, '2016': 571.88,
                     '2017': 571.88, '2018': 571.88,
                     '2019': 571.88, '2020': 571.88},
                 'source': 'EIA AEO',
                 'units': '2017$/kBtu/h heating'},
             'performance':
                {'typical':
                    {'2009': 3.4411, '2010': 3.4462, '2011': 3.4519,
                     '2012': 3.4562, '2013': 3.4618, '2014': 3.4656,
                     '2015': 3.4704, '2016': 3.4745, '2017': 3.4792,
                     '2018': 3.4831, '2019': 3.4873, '2020': 3.4978},
                 'best':
                    {'2009': 4.0, '2010': 4.0, '2011': 4.0,
                     '2012': 4.0, '2013': 4.0, '2014': 4.0,
                     '2015': 4.0, '2016': 4.0, '2017': 4.0,
                     '2018': 4.0, '2019': 4.0, '2020': 4.2},
                 'source': 'EIA AEO',
                 'units': 'BTU out/BTU in'},
             'lifetime':
                {'average':
                    {'2009': 25, '2010': 25, '2011': 25,
                     '2012': 25, '2013': 25, '2014': 25,
                     '2015': 25, '2016': 25, '2017': 25,
                     '2018': 25, '2019': 25, '2020': 25},
                 'range':
                    {'2009': 0, '2010': 0, '2011': 0,
                     '2012': 0, '2013': 0, '2014': 0,
                     '2015': 0, '2016': 0, '2017': 0,
                     '2018': 0, '2019': 0, '2020': 0},
                 'source': 'EIA AEO',
                 'units': 'years'}},
         'elec_boiler':
            {'installed cost':
                {'typical':
                    {'2009': 16.68, '2010': 16.68, '2011': 16.68,
                     '2012': 16.68, '2013': 16.68, '2014': 16.68,
                     '2015': 16.68, '2016': 16.68, '2017': 16.68,
                     '2018': 16.68, '2019': 16.68, '2020': 16.68},
                 'best':
                    {'2009': 16.68, '2010': 16.68, '2011': 16.68,
                     '2012': 21.13, '2013': 21.13, '2014': 21.13,
                     '2015': 21.13, '2016': 21.13, '2017': 21.13,
                     '2018': 21.13, '2019': 21.13, '2020': 21.13},
                 'source': 'EIA AEO',
                 'units': '2017$/kBtu/h heating'},
             'performance':
                {'typical':
                    {'2009': 0.94, '2010': 0.94, '2011': 0.94,
                     '2012': 0.94, '2013': 0.94, '2014': 0.94,
                     '2015': 0.94, '2016': 0.94, '2017': 0.94,
                     '2018': 0.94, '2019': 0.94, '2020': 0.94},
                 'best':
                    {'2009': 0.94, '2010': 0.94, '2011': 0.94,
                     '2012': 0.94, '2013': 0.94, '2014': 0.94,
                     '2015': 0.94, '2016': 0.94, '2017': 0.94,
                     '2018': 0.94, '2019': 0.94, '2020': 0.94},
                 'source': 'EIA AEO',
                 'units': 'BTU out/BTU in'},
             'lifetime':
                {'average':
                    {'2009': 15.0, '2010': 15.0, '2011': 15.0,
                     '2012': 15.0, '2013': 15.0, '2014': 15.0,
                     '2015': 15.0, '2016': 15.0, '2017': 15.0,
                     '2018': 15.0, '2019': 15.0, '2020': 15.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}},
         'rooftop_ASHP-heat':
            {'installed cost':
                {'typical':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'best':
                    {'2009': 102.78, '2010': 102.78, '2011': 102.78,
                     '2012': 102.78, '2013': 102.78, '2014': 102.78,
                     '2015': 102.78, '2016': 102.78, '2017': 102.78,
                     '2018': 102.78, '2019': 102.78, '2020': 102.78},
                 'source': 'EIA AEO',
                 'units': '2017$/kBtu/h heating'},
             'performance':
                {'typical':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'best':
                    {'2009': 3.4, '2010': 3.4, '2011': 3.4,
                     '2012': 3.4, '2013': 3.4, '2014': 3.4,
                     '2015': 3.4, '2016': 3.4, '2017': 3.4,
                     '2018': 3.4, '2019': 3.4, '2020': 3.4},
                 'source': 'EIA AEO',
                 'units': 'BTU out/BTU in'},
             'lifetime':
                {'average':
                    {'2009': 15, '2010': 15, '2011': 15,
                     '2012': 15, '2013': 15, '2014': 15,
                     '2015': 15, '2016': 15, '2017': 15,
                     '2018': 15, '2019': 15, '2020': 15},
                 'range':
                    {'2009': 0, '2010': 0, '2011': 0,
                     '2012': 0, '2013': 0, '2014': 0,
                     '2015': 0, '2016': 0, '2017': 0,
                     '2018': 0, '2019': 0, '2020': 0},
                 'source': 'EIA AEO',
                 'units': 'years'}}},
        {'consumer choice':
            {'time preference': {
                '2009': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2010': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2011': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2012': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2013': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2014': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2015': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2016': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2017': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2018': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2019': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2020': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0]},
             'population fraction': {
                '2009': [0.267, 0.226, 0.197, 0.189, 0.105, 0.013, 0.003],
                '2010': [0.265, 0.226, 0.186, 0.184, 0.115, 0.019, 0.005],
                '2011': [0.265, 0.226, 0.183, 0.183, 0.113, 0.02, 0.01],
                '2012': [0.265, 0.226, 0.181, 0.179, 0.11, 0.036, 0.003],
                '2013': [0.265, 0.226, 0.181, 0.179, 0.11, 0.036, 0.003],
                '2014': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2015': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2016': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2017': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2018': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2019': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003],
                '2020': [0.265, 0.226, 0.196, 0.192, 0.105, 0.013, 0.003]}},
         'CAV_Vent':
            {'installed cost':
                {'typical':
                    {'2009': 5061.56, '2010': 5061.56,
                     '2011': 5062.59856, '2012': 5063.34809,
                     '2013': 5063.48939, '2014': 5064.05370,
                     '2015': 5064.18533, '2016': 5064.27284,
                     '2017': 5064.33164, '2018': 5064.50486,
                     '2019': 5064.69569, '2020': 5065.74336},
                 'best':
                    {'2009': 5061.56, '2010': 5061.56, '2011': 5509.18,
                     '2012': 5509.18, '2013': 5509.18, '2014': 5509.18,
                     '2015': 5509.18, '2016': 5509.18, '2017': 5509.18,
                     '2018': 5509.18, '2019': 5509.18, '2020': 5509.18},
                 'source': 'EIA AEO',
                 'units': '2017$/1000 CFM'},
             'performance':
                {'typical':
                    {'2009': 0.38, '2010': 0.38, '2011': 0.387,
                     '2012': 0.393, '2013': 0.397, '2014': 0.402,
                     '2015': 0.405, '2016': 0.408, '2017': 0.411,
                     '2018': 0.413, '2019': 0.415, '2020': 0.425},
                 'best':
                    {'2009': 0.38, '2010': 0.38, '2011': 0.48,
                     '2012': 0.48, '2013': 0.48, '2014': 0.48,
                     '2015': 0.48, '2016': 0.48, '2017': 0.48,
                     '2018': 0.48, '2019': 0.48, '2020': 0.58},
                 'source': 'EIA AEO',
                 'units': 'cfm-hr/BTU in'},
             'lifetime':
                {'average':
                    {'2009': 20.0, '2010': 20.0, '2011': 20.0,
                     '2012': 20.0, '2013': 20.0, '2014': 20.0,
                     '2015': 20.0, '2016': 20.0, '2017': 20.0,
                     '2018': 20.0, '2019': 20.0, '2020': 20.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}},
         'VAV_Vent':
            {'installed cost':
                {'typical':
                    {'2009': 6266.69, '2010': 6266.69, '2011': 6266.69,
                     '2012': 6266.69, '2013': 6266.69, '2014': 6266.69,
                     '2015': 6266.69, '2016': 6266.69, '2017': 6266.69,
                     '2018': 6266.69, '2019': 6266.69, '2020': 6266.69},
                 'best':
                    {'2009': 6266.69, '2010': 6266.69, '2011': 6886.47,
                     '2012': 6886.47, '2013': 6886.47, '2014': 6886.47,
                     '2015': 6886.47, '2016': 6886.47, '2017': 6886.47,
                     '2018': 6886.47, '2019': 6886.47, '2020': 6886.47},
                 'source': 'EIA AEO',
                 'units': '2017$/1000 CFM'},
             'performance':
                {'typical':
                    {'2009': 1.26, '2010': 1.26, '2011': 1.2732,
                     '2012': 1.2834, '2013': 1.2911, '2014': 1.2959,
                     '2015': 1.3, '2016': 1.3038, '2017': 1.3060,
                     '2018': 1.3098, '2019': 1.3126, '2020': 1.3362},
                 'best':
                    {'2009': 1.26, '2010': 1.26, '2011': 1.5,
                     '2012': 1.5, '2013': 1.5, '2014': 1.5,
                     '2015': 1.5, '2016': 1.5, '2017': 1.5,
                     '2018': 1.5, '2019': 1.5, '2020': 1.82},
                 'source': 'EIA AEO',
                 'units': 'cfm-hr/BTU in'},
             'lifetime':
                {'average':
                    {'2009': 20, '2010': 20, '2011': 20,
                     '2012': 20, '2013': 20, '2014': 20,
                     '2015': 20, '2016': 20, '2017': 20,
                     '2018': 20, '2019': 20, '2020': 20},
                 'range':
                    {'2009': 0, '2010': 0, '2011': 0,
                     '2012': 0, '2013': 0, '2014': 0,
                     '2015': 0, '2016': 0, '2017': 0,
                     '2018': 0, '2019': 0, '2020': 0},
                 'source': 'EIA AEO',
                 'units': 'years'}}},
        {'consumer choice':
            {'time preference': {
                '2009': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2010': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2011': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2012': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2013': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2014': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2015': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2016': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2017': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2018': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2019': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2020': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0]},
             'population fraction': {
                '2009': [0.266, 0.224, 0.195, 0.192, 0.085, 0.012, 0.026],
                '2010': [0.264, 0.225, 0.18, 0.185, 0.092, 0.022, 0.032],
                '2011': [0.264, 0.225, 0.177, 0.184, 0.09, 0.026, 0.034],
                '2012': [0.264, 0.225, 0.177, 0.183, 0.091, 0.026, 0.034],
                '2013': [0.264, 0.225, 0.177, 0.183, 0.091, 0.026, 0.034],
                '2014': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
                '2015': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
                '2016': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
                '2017': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
                '2018': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
                '2019': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027],
                '2020': [0.264, 0.225, 0.193, 0.193, 0.085, 0.013, 0.027]}},
         '23W CFL':
            {'installed cost':
                {'typical':
                    {'2009': 0.0, '2010': 0.0, '2011': 83.29867,
                     '2012': 84.67, '2013': 84.67, '2014': 84.67,
                     '2015': 84.67, '2016': 84.67, '2017': 84.67,
                     '2018': 84.67, '2019': 84.67, '2020': 84.67},
                 'best':
                    {'2009': 0.0, '2010': 0.0, '2011': 84.67,
                     '2012': 84.67, '2013': 84.67, '2014': 84.67,
                     '2015': 84.67, '2016': 84.67, '2017': 84.67,
                     '2018': 84.67, '2019': 84.67, '2020': 84.67},
                 'source': 'EIA AEO',
                 'units': '2017$/1000 lm'},
             'performance':
                {'typical':
                    {'2009': 0.0, '2010': 0.0, '2011': 42.4,
                     '2012': 42.4, '2013': 42.4, '2014': 42.4,
                     '2015': 42.4, '2016': 42.4, '2017': 42.4,
                     '2018': 42.4, '2019': 42.4, '2020': 42.9},
                 'best':
                    {'2009': 0.0, '2010': 0.0, '2011': 42.4,
                     '2012': 42.4, '2013': 42.4, '2014': 42.4,
                     '2015': 42.4, '2016': 42.4, '2017': 42.4,
                     '2018': 42.4, '2019': 42.4, '2020': 44.6},
                 'source': 'EIA AEO',
                 'units': 'lm/W'},
             'lifetime':
                {'average':
                    {'2009': 15.0, '2010': 15.0, '2011': 15.0,
                     '2012': 15.0, '2013': 15.0, '2014': 15.0,
                     '2015': 15.0, '2016': 15.0, '2017': 15.0,
                     '2018': 15.0, '2019': 15.0, '2020': 15.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}},
         '70W HIR PAR-38':
            {'installed cost':
                {'typical':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'best':
                    {'2009': 73.56, '2010': 73.56, '2011': 73.56,
                     '2012': 73.56, '2013': 73.56, '2014': 73.56,
                     '2015': 73.56, '2016': 73.56, '2017': 86.3,
                     '2018': 86.3, '2019': 86.3, '2020': 86.3},
                 'source': 'EIA AEO',
                 'units': '2017$/1000 lm'},
             'performance':
                {'typical':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'best':
                    {'2009': 16.7, '2010': 16.7, '2011': 18.7,
                     '2012': 18.7, '2013': 18.7, '2014': 18.7,
                     '2015': 18.7, '2016': 18.7, '2017': 18.7,
                     '2018': 18.7, '2019': 18.7, '2020': 19.6},
                 'source': 'EIA AEO',
                 'units': 'lm/W'},
             'lifetime':
                {'average':
                    {'2009': 15.0, '2010': 15.0, '2011': 15.0,
                     '2012': 15.0, '2013': 15.0, '2014': 15.0,
                     '2015': 15.0, '2016': 15.0, '2017': 15.0,
                     '2018': 15.0, '2019': 15.0, '2020': 15.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}},
         '90W Halogen PAR-38':
            {'installed cost':
                {'typical':
                    {'2009': 75.50584, '2010': 75.86714,
                     '2011': 76.16692, '2012': 76.19678,
                     '2013': 76.20059, '2014': 76.20855,
                     '2015': 76.22143, '2016': 76.23791,
                     '2017': 76.24829, '2018': 76.26867,
                     '2019': 76.31, '2020': 76.50077},
                 'best':
                    {'2009': 76.16692, '2010': 76.19678,
                     '2011': 76.20059, '2012': 76.20855,
                     '2013': 76.22143, '2014': 76.23791,
                     '2015': 76.26867, '2016': 76.31,
                     '2017': 81.89, '2018': 81.89,
                     '2019': 81.89, '2020': 81.89},
                 'source': 'EIA AEO',
                 'units': '2017$/1000 lm'},
             'performance':
                {'typical':
                    {'2009': 13.5, '2010': 13.5, '2011': 13.5,
                     '2012': 13.5, '2013': 13.5, '2014': 13.5,
                     '2015': 13.5, '2016': 13.5, '2017': 13.5,
                     '2018': 13.5, '2019': 13.5, '2020': 13.5},
                 'best':
                    {'2009': 13.5, '2010': 13.5, '2011': 13.7,
                     '2012': 13.7, '2013': 13.7, '2014': 13.7,
                     '2015': 13.7, '2016': 13.7, '2017': 13.7,
                     '2018': 13.7, '2019': 13.7, '2020': 14.3},
                 'source': 'EIA AEO',
                 'units': 'lm/W'},
             'lifetime':
                {'average':
                    {'2009': 15.0, '2010': 15.0, '2011': 15.0,
                     '2012': 15.0, '2013': 15.0, '2014': 15.0,
                     '2015': 15.0, '2016': 15.0, '2017': 15.0,
                     '2018': 15.0, '2019': 15.0, '2020': 15.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}},
         'F28T8 HE w/ OS & SR':
            {'installed cost':
                {'typical':
                    {'2009': 26.49244, '2010': 26.52, '2011': 26.52,
                     '2012': 26.52, '2013': 26.52, '2014': 26.52,
                     '2015': 26.52, '2016': 26.52, '2017': 26.52,
                     '2018': 26.52, '2019': 26.52, '2020': 26.52},
                 'best':
                    {'2009': 26.49244, '2010': 26.52, '2011': 26.52,
                     '2012': 26.52, '2013': 26.52, '2014': 26.52,
                     '2015': 26.52, '2016': 26.52, '2017': 26.52,
                     '2018': 26.52, '2019': 26.52, '2020': 26.52},
                 'source': 'EIA AEO',
                 'units': '2017$/1000 lm'},
             'performance':
                {'typical':
                    {'2009': 178.7, '2010': 178.7, '2011': 178.7,
                     '2012': 178.7, '2013': 178.7, '2014': 178.7,
                     '2015': 178.7, '2016': 178.7, '2017': 178.7,
                     '2018': 178.7, '2019': 178.7, '2020': 179.25},
                 'best':
                    {'2009': 178.7, '2010': 178.7, '2011': 178.7,
                     '2012': 178.7, '2013': 178.7, '2014': 178.7,
                     '2015': 178.7, '2016': 178.7, '2017': 178.7,
                     '2018': 178.7, '2019': 178.7, '2020': 192.1},
                 'source': 'EIA AEO',
                 'units': 'lm/W'},
             'lifetime':
                {'average':
                    {'2009': 15.0, '2010': 15.0, '2011': 15.0,
                     '2012': 15.0, '2013': 15.0, '2014': 15.0,
                     '2015': 15.0, '2016': 15.0, '2017': 15.0,
                     '2018': 15.0, '2019': 15.0, '2020': 15.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}},
         'F28T8 HE w/ OS':
            {'installed cost':
                {'typical':
                    {'2009': 24.5418, '2010': 24.68, '2011': 24.68,
                     '2012': 24.68, '2013': 24.68, '2014': 24.68,
                     '2015': 24.68, '2016': 24.68, '2017': 24.68,
                     '2018': 24.68, '2019': 24.68, '2020': 24.68},
                 'best':
                    {'2009': 24.5418, '2010': 24.68, '2011': 24.68,
                     '2012': 24.68, '2013': 24.68, '2014': 24.68,
                     '2015': 24.68, '2016': 24.68, '2017': 24.68,
                     '2018': 24.68, '2019': 24.68, '2020': 24.68},
                 'source': 'EIA AEO',
                 'units': '2017$/1000 lm'},
             'performance':
                {'typical':
                    {'2009': 151.1, '2010': 151.1, '2011': 151.1,
                     '2012': 151.1, '2013': 151.1, '2014': 151.1,
                     '2015': 151.1, '2016': 151.1, '2017': 151.1,
                     '2018': 151.1, '2019': 151.1, '2020': 153.73},
                 'best':
                    {'2009': 151.1, '2010': 151.1, '2011': 151.1,
                     '2012': 151.1, '2013': 151.1, '2014': 151.1,
                     '2015': 151.1, '2016': 151.1, '2017': 151.1,
                     '2018': 151.1, '2019': 151.1, '2020': 162.5},
                 'source': 'EIA AEO',
                 'units': 'lm/W'},
             'lifetime':
                {'average':
                    {'2009': 15.0, '2010': 15.0, '2011': 15.0,
                     '2012': 15.0, '2013': 15.0, '2014': 15.0,
                     '2015': 15.0, '2016': 15.0, '2017': 15.0,
                     '2018': 15.0, '2019': 15.0, '2020': 15.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}},
         'F34T12':
            {'installed cost':
                {'typical':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'best':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': '2017$/1000 lm'},
             'performance':
                {'typical':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'best':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'lm/W'},
             'lifetime':
                {'average':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}},
         'LED Edison':
            {'installed cost':
                {'typical':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 105.71},
                 'best':
                    {'2009': 296.81, '2010': 509.77, '2011': 509.77,
                     '2012': 509.77, '2013': 509.77, '2014': 509.77,
                     '2015': 509.77, '2016': 509.77, '2017': 509.77,
                     '2018': 509.77, '2019': 509.77, '2020': 509.77},
                 'source': 'EIA AEO',
                 'units': '2017$/1000 lm'},
             'performance':
                {'typical':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 170.0},
                 'best':
                    {'2009': 51.0, '2010': 51.0, '2011': 60.0,
                     '2012': 60.0, '2013': 60.0, '2014': 60.0,
                     '2015': 60.0, '2016': 60.0, '2017': 60.0,
                     '2018': 60.0, '2019': 60.0, '2020': 170.0},
                 'source': 'EIA AEO',
                 'units': 'lm/W'},
             'lifetime':
                {'average':
                    {'2009': 15.0, '2010': 15.0, '2011': 15.0,
                     '2012': 15.0, '2013': 15.0, '2014': 15.0,
                     '2015': 15.0, '2016': 15.0, '2017': 15.0,
                     '2018': 15.0, '2019': 15.0, '2020': 15.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}},
         'T8 F32 EEMag (e)':
            {'installed cost':
                {'typical':
                    {'2009': 31.11, '2010': 31.11, '2011': 31.11,
                     '2012': 31.11, '2013': 31.11, '2014': 31.11,
                     '2015': 31.11, '2016': 31.11, '2017': 31.11,
                     '2018': 31.11, '2019': 31.11, '2020': 31.11},
                 'best':
                    {'2009': 31.11, '2010': 31.11, '2011': 31.11,
                     '2012': 31.11, '2013': 31.11, '2014': 31.11,
                     '2015': 31.11, '2016': 31.11, '2017': 31.11,
                     '2018': 31.11, '2019': 31.11, '2020': 31.11},
                 'source': 'EIA AEO',
                 'units': '2017$/1000 lm'},
             'performance':
                {'typical':
                    {'2009': 59.0, '2010': 59.0, '2011': 59.0,
                     '2012': 59.0, '2013': 59.0, '2014': 59.0,
                     '2015': 59.0, '2016': 59.0, '2017': 59.0,
                     '2018': 59.0, '2019': 59.0, '2020': 59.0},
                 'best':
                    {'2009': 59.0, '2010': 59.0, '2011': 59.0,
                     '2012': 59.0, '2013': 59.0, '2014': 59.0,
                     '2015': 59.0, '2016': 59.0, '2017': 59.0,
                     '2018': 59.0, '2019': 59.0, '2020': 59.0},
                 'source': 'EIA AEO',
                 'units': 'lm/W'},
             'lifetime':
                {'average':
                    {'2009': 15.0, '2010': 15.0, '2011': 15.0,
                     '2012': 15.0, '2013': 15.0, '2014': 15.0,
                     '2015': 15.0, '2016': 15.0, '2017': 15.0,
                     '2018': 15.0, '2019': 15.0, '2020': 15.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}}},
        {'consumer choice':
            {'time preference': {
                '2009': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2010': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2011': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2012': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2013': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2014': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2015': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2016': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2017': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2018': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2019': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0],
                '2020': [10.0, 1.0, 0.45, 0.25, 0.15, 0.065, 0.0]},
             'population fraction': {
                '2009': [0.265, 0.247, 0.216, 0.169, 0.096, 0.004, 0.003],
                '2010': [0.261, 0.248, 0.218, 0.165, 0.09, 0.003, 0.015],
                '2011': [0.261, 0.248, 0.214, 0.158, 0.086, 0.003, 0.03],
                '2012': [0.261, 0.248, 0.215, 0.162, 0.087, 0.019, 0.008],
                '2013': [0.261, 0.248, 0.215, 0.162, 0.087, 0.019, 0.008],
                '2014': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
                '2015': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
                '2016': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
                '2017': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
                '2018': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
                '2019': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004],
                '2020': [0.261, 0.248, 0.214, 0.171, 0.097, 0.005, 0.004]}},
         'Range, Electric, 4 burner, oven, 11-inch gr':
            {'installed cost':
                {'typical':
                    {'2009': 52.56, '2010': 52.56, '2011': 52.56,
                     '2012': 52.56, '2013': 52.56, '2014': 52.56,
                     '2015': 52.56, '2016': 52.56, '2017': 52.56,
                     '2018': 52.56, '2019': 52.56, '2020': 52.56},
                 'best':
                    {'2009': 52.56, '2010': 52.56, '2011': 52.56,
                     '2012': 52.56, '2013': 52.56, '2014': 52.56,
                     '2015': 52.56, '2016': 52.56, '2017': 52.56,
                     '2018': 52.56, '2019': 52.56, '2020': 52.56},
                 'source': 'EIA AEO',
                 'units': '2017$/kBtu/h cooking'},
             'performance':
                {'typical':
                    {'2009': 0.7, '2010': 0.7, '2011': 0.7,
                     '2012': 0.7, '2013': 0.7, '2014': 0.7,
                     '2015': 0.7, '2016': 0.7, '2017': 0.7,
                     '2018': 0.7, '2019': 0.7, '2020': 0.7},
                 'best':
                    {'2009': 0.7, '2010': 0.7, '2011': 0.7,
                     '2012': 0.7, '2013': 0.7, '2014': 0.7,
                     '2015': 0.7, '2016': 0.7, '2017': 0.7,
                     '2018': 0.7, '2019': 0.7, '2020': 0.7},
                 'source': 'EIA AEO',
                 'units': 'BTU out/BTU in'},
             'lifetime':
                {'average':
                    {'2009': 10.0, '2010': 10.0, '2011': 10.0,
                     '2012': 10.0, '2013': 10.0, '2014': 10.0,
                     '2015': 10.0, '2016': 10.0, '2017': 10.0,
                     '2018': 10.0, '2019': 10.0, '2020': 10.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}},
         'Range, Electric-induction, 4 burner, oven, ':
            {'installed cost':
                {'typical':
                    {'2009': 61.46, '2010': 61.46, '2011': 61.46,
                     '2012': 61.46, '2013': 61.46, '2014': 61.46,
                     '2015': 61.46, '2016': 61.46, '2017': 61.46,
                     '2018': 61.46, '2019': 61.46, '2020': 61.46},
                 'best':
                    {'2009': 61.46, '2010': 61.46, '2011': 61.46,
                     '2012': 61.46, '2013': 61.46, '2014': 61.46,
                     '2015': 61.46, '2016': 61.46, '2017': 61.46,
                     '2018': 61.46, '2019': 61.46, '2020': 61.46},
                 'source': 'EIA AEO',
                 'units': '2017$/kBtu/h cooking'},
             'performance':
                {'typical':
                    {'2009': 0.8, '2010': 0.8, '2011': 0.8,
                     '2012': 0.8, '2013': 0.8, '2014': 0.8,
                     '2015': 0.8, '2016': 0.8, '2017': 0.8,
                     '2018': 0.8, '2019': 0.8, '2020': 0.8},
                 'best':
                    {'2009': 0.8, '2010': 0.8, '2011': 0.8,
                     '2012': 0.8, '2013': 0.8, '2014': 0.8,
                     '2015': 0.8, '2016': 0.8, '2017': 0.8,
                     '2018': 0.8, '2019': 0.8, '2020': 0.8},
                 'source': 'EIA AEO',
                 'units': 'BTU out/BTU in'},
             'lifetime':
                {'average':
                    {'2009': 10.0, '2010': 10.0, '2011': 10.0,
                     '2012': 10.0, '2013': 10.0, '2014': 10.0,
                     '2015': 10.0, '2016': 10.0, '2017': 10.0,
                     '2018': 10.0, '2019': 10.0, '2020': 10.0},
                 'range':
                    {'2009': 0.0, '2010': 0.0, '2011': 0.0,
                     '2012': 0.0, '2013': 0.0, '2014': 0.0,
                     '2015': 0.0, '2016': 0.0, '2017': 0.0,
                     '2018': 0.0, '2019': 0.0, '2020': 0.0},
                 'source': 'EIA AEO',
                 'units': 'years'}}}]

    # Define a dict that maps keys in the cost conversion data to numbered
    # end uses in the raw EIA data
    eu_map = {
        "heating": 1,
        "cooling": 2,
        "water heating": 3,
        "ventilation": 4,
        "cooking": 5,
        "lighting": 6,
        "refrigeration": 7}

    def dict_check(self, dict1, dict2):
        """Compare two dicts for equality, allowing for floating point error.
        """

        # zip() and zip_longest() produce tuples for the items
        # identified, where in the case of a dict, the first item
        # in the tuple is the key and the second item is the value;
        # in the case where the dicts are not of identical size,
        # zip_longest() will use the fillvalue created below as a
        # substitute in the dict that has missing content; this
        # value is given as a tuple to be of comparable structure
        # to the normal output from zip_longest()
        fill_val = ('substituted entry', 5.2)

        # In this structure, k and k2 are the keys that correspond to
        # the dicts or unitary values that are found in i and i2,
        # respectively, at the current level of the recursive
        # exploration of dict1 and dict2, respectively
        for (k, i), (k2, i2) in itertools.zip_longest(sorted(dict1.items()),
                                                      sorted(dict2.items()),
                                                      fillvalue=fill_val):

            # Confirm that at the current location in the dict structure,
            # the keys are equal; this should fail if one of the dicts
            # is empty, is missing section(s), or has different key names
            self.assertEqual(k, k2)

            # If the recursion has not yet reached the terminal/leaf node
            if isinstance(i, dict):
                # Test that the dicts from the current keys are equal
                self.assertCountEqual(i, i2)
                # Continue to recursively traverse the dict
                self.dict_check(i, i2)

            # At the terminal/leaf node, if the value is a string
            elif isinstance(i, str):
                self.assertEqual(dict1[k], dict2[k2])

            # At the terminal/leaf node
            else:
                # Compare the values, allowing for floating point inaccuracy
                self.assertAlmostEqual(dict1[k], dict2[k2], places=2)


class EngineeringUnitsIdentificationTest(CommonUnitTest):
    """ Test the function that returns a text string for the units of
    technologies based on the end use number and a text string
    specifying whether cost or performance units are needed """

    def test_indicated_cost_units(self):
        for idx, selected in enumerate(self.data_to_select):
            self.assertEqual(cmt.units_id(selected, 'cost'),
                             self.cost_units[idx])

    def test_indicated_performance_units(self):
        for idx, selected in enumerate(self.data_to_select):
            self.assertEqual(cmt.units_id(selected, 'performance'),
                             self.perf_units[idx])


class TechnologyDataSelectionTest(CommonUnitTest):
    """ Test the function that selects from the technology data array
    only the rows of data for a specified microsegment """

    # Test that the correct data are returned
    def test_selection_from_technology_data(self):
        for idx, sel in enumerate(self.data_to_select):
            np.testing.assert_array_equal(
                cmt.tech_data_selector(self.tech_data, sel),
                self.selected_tech_data[idx])


class ServiceDemandDataSelectionTest(CommonUnitTest):
    """ Test the function that selects data from the service demand
    array based on a specified microsegment """

    # Set up function under test and save outputs
    @classmethod  # (so that set up is run once for the entire class)
    def setUpClass(self):
        # Initialize variables for outputs from function under test
        self.test_sd_data = []
        self.test_sd_data_names = []

        # Call function and store outputs in the initialized variables
        for sel in self.data_to_select:
            (a, b) = cmt.sd_data_selector(self.sd_data, sel, self.tmp_yrs)
            self.test_sd_data.append(a)
            self.test_sd_data_names.append(b)

    # Test whether the arrays extracted from the service demand
    # data are consistent with the expected output, allowing for
    # floating point error differences between the arrays
    def test_data_subset_from_service_demand_data(self):
        for idx, data_subset in enumerate(self.test_sd_data):
            np.testing.assert_allclose(data_subset, self.selected_sd_data[idx])

    # Check that list of names output by the function under
    # test includes all the entries expected
    def test_technology_names_subset_from_service_demand_data(self):
        for idx, names_subset in enumerate(self.test_sd_data_names):
            self.assertEqual(names_subset, self.selected_sd_names[idx])


class SingleTechnologySelectionTest(CommonUnitTest):
    """ Test the function that selects the data for a single technology
    from the larger numpy array that includes multiple technologies
    based on a specific technology name provided """

    def test_selection_of_single_technology(self):
        for idx, tech_array in enumerate(self.selected_tech_data):
            np.testing.assert_array_equal(
                cmt.single_tech_selector(tech_array, self.tmp_names[idx]),
                self.reduced_tech_data[idx])


class CostAndPerformanceDataExtractionTest(CommonUnitTest):
    """ Test the function that extracts the cost or performance
    data from the source data array specific to a single technology
    and converts them into the desired form to be output to the
    cost/performance/lifetime JSON """

    # Test equality of the dicts of cost data generated for each technology
    def test_cost_selection_and_conversion(self):
        cmt.UsefulVars.trunc_len = 43
        for idx, input_array in enumerate(self.reduced_tech_data):
            cost_data, non_matched_names = cmt.cost_perf_extractor(
                input_array,
                self.selected_sd_data[idx],
                self.selected_sd_names[idx],
                self.tmp_yrs,
                'cost')
            self.dict_check(cost_data, self.result_cost[idx])

    # Test equality of the dicts of performance (i.e., energy efficiency)
    # data generated for each technology
    def test_performance_selection_and_conversion(self):
        cmt.UsefulVars.trunc_len = 43
        for idx, input_array in enumerate(self.reduced_tech_data):
            perf_data, non_matched_names = cmt.cost_perf_extractor(
                input_array,
                self.selected_sd_data[idx],
                self.selected_sd_names[idx],
                self.tmp_yrs,
                'performance')
            self.dict_check(perf_data, self.result_perf[idx])


class LifetimeDataExtractionTest(CommonUnitTest):
    """ Test the function that extracts the technology lifetime data
    from a data array for a single technology and converts them into the
    desired form to be output to the cost/performance/lifetime JSON """

    # Test equality of the dicts of lifetime data generated for
    # each technology
    def test_lifetime_selection_and_conversion(self):
        for idx, input_array in enumerate(self.reduced_tech_data):
            self.dict_check(cmt.life_extractor(input_array, self.tmp_yrs),
                            self.result_life[idx])


class TechnologyNameListExtractorTest(CommonUnitTest):
    """ Test the function that uses the technology data for a specific
    microsegment to generate a list of the unique technology names for
    that microsegment """

    def test_selection_of_single_technology(self):
        for idx, tech_array in enumerate(self.selected_tech_data):
            self.assertCountEqual(
                cmt.tech_names_extractor(tech_array),
                self.tech_names[idx])


class TechnologyDataHandlerTest(CommonUnitTest):
    """ Test the combined performance of several functions within a
    single overarching function that produces a formatted dict of
    technology-specific cost, performance, and lifetime data for an
    entire microsegment """

    # Test equality of the dicts generated for the microsegment
    # specified in the third argument of the mseg_technology_handler
    # function
    def test_conversion_of_tech_and_sd_data_to_restructured_dict(self):
        cmt.UsefulVars.trunc_len = 43
        # Identify the unique microsegments in the data_to_select
        # list of lists
        unique_data_to_select = []
        for an_mseg in self.data_to_select:
            if an_mseg not in unique_data_to_select:
                unique_data_to_select.append(an_mseg)

        for idx, selected in enumerate(unique_data_to_select):
            mseg_dict, non_matched_names = cmt.mseg_technology_handler(
                self.tech_data,
                self.sd_data,
                self.prem_data,
                self.db_data,
                selected,
                self.tmp_yrs,
                self.eu_map)
            self.dict_check(mseg_dict, self.tech_master_dict[idx])


class ChoiceModelParametersExtractionTest(CommonUnitTest):
    """ Test the successful extraction of the time preference premiums
    developed by EIA to describe consumer preferences as an indirect
    function of discount rate; the function produces a formatted dict
    of fractions of the population and corresponding time preference
    premiums for each year """

    # Test equality of the dicts generated for the function for
    # each of the specified microsegments for the years identified
    # and available from the data
    def test_time_preference_premium_parameter_extraction(self):
        for idx, sel in enumerate(self.data_to_select):
            self.dict_check(cmt.tpp_handler(self.prem_data, sel, self.tmp_yrs),
                            self.result_prem[idx])


# Offer external code execution (include all lines below this point in all
# test files)
def main():
    # Triggers default behavior of running all test fixtures in the file
    unittest.main()


if __name__ == '__main__':
    main()
